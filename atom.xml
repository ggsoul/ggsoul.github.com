<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gaoxuefeng&#39;s Blog</title>
  <subtitle>一个90后程序员，只是想再往前走得更远</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://gaoxuefeng.com/"/>
  <updated>2017-05-05T08:09:31.000Z</updated>
  <id>http://gaoxuefeng.com/</id>
  
  <author>
    <name>Gaoxuefeng</name>
    <email>gaoxuefeng@baidu.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React组件</title>
    <link href="http://gaoxuefeng.com/2017/04/25/React%E7%BB%84%E4%BB%B6/"/>
    <id>http://gaoxuefeng.com/2017/04/25/React组件/</id>
    <published>2017-04-25T11:26:07.000Z</published>
    <updated>2017-05-05T08:09:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>Components用来把UI拆分成独立的，可重复使用的部分，然后做不同的考量。<code>React.Component</code>由<code>React</code>提供。</p>
<a id="more"></a>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>React.Component</code>是一个抽象的基类，没有直接有意义的参考。通常用来定义有一个<code>render</code>方法的子类。</p>
<p>一个简洁的组件:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeting</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果没有使用ES6，可以使用<code>create-react-class</code>模块来代替。</p>
<h3 id="组件生命周期"><a href="#组件生命周期" class="headerlink" title="组件生命周期"></a>组件生命周期</h3><p>每一个组件都有一些生命周期方法，可以重写这些方法来实现在特定时间点的处理。有 <strong><code>will</code></strong> 前缀的方法是在某事发生前，有 <strong><code>did</code></strong> 前缀的方法是在某事发生后。</p>
<h4 id="装载"><a href="#装载" class="headerlink" title="装载"></a>装载</h4><p>组件实例创建并插入到<code>DOM</code>中时会调用这些方法：</p>
<ul>
<li><code>constructor()</code></li>
<li><code>componentWillMount()</code></li>
<li><code>render()</code></li>
<li><code>componentDidMount()</code></li>
</ul>
<h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><p><code>props</code>和<code>state</code>的改变会导致更新。组件被重绘的时候会调用这些方法：</p>
<ul>
<li><code>componentWillReceiveProps()</code></li>
<li><code>shouldComponentUpdate()</code></li>
<li><code>componentWillUpdate()</code></li>
<li><code>render()</code></li>
<li><code>componentDidUpdate()</code></li>
</ul>
<h4 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h4><p>从<code>DOM</code>中移除组件时会调用这个方法：</p>
<ul>
<li><code>componentWillUnmount()</code></li>
</ul>
<h3 id="其它APIs"><a href="#其它APIs" class="headerlink" title="其它APIs"></a>其它APIs</h3><p>每个组件也提供了一些其它APIs：</p>
<ul>
<li><code>setState()</code></li>
<li><code>forceUpdate()</code></li>
</ul>
<h3 id="类属性"><a href="#类属性" class="headerlink" title="类属性"></a>类属性</h3><ul>
<li><code>defaultProps</code></li>
<li><code>displayName</code></li>
</ul>
<h3 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h3><ul>
<li><code>props</code></li>
<li><code>state</code></li>
</ul>
<hr>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h3 id="render"><a href="#render" class="headerlink" title="render()"></a><code>render()</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">render()</div></pre></td></tr></table></figure>
<p>组件中一定要有<code>render()</code>方法。</p>
<p>被调用时会检查<code>this.props</code>和<code>this.state</code>来返回一个<code>React</code>原件。这个原件也可以是一个原生<code>DOM</code>组件的画像，比如<code>&lt;div /&gt;</code>，或者自定义的综合组件。</p>
<p>如果不想要渲染任何东西，可以直接返回<code>null</code>或者<code>false</code>。这时调用<code>ReactDOM.findDOMNode(this)</code>也会返回<code>null</code>。</p>
<p><code>render()</code>方法应该是纯净的，每次被调用是都应该返回相同的结果，不应该在方法里修改组件状态，或者与浏览器有直接交互。如果想要和浏览器交互，在<code>componentDidMount()</code>或者其它声明周期中完成你的工作。保持<code>render()</code>的纯净使组件更容易理解。</p>
<blockquote>
<p>Note</p>
<p>如果<code>shouldComponentUpdate()</code>返回false，<code>render()</code>不会被执行</p>
</blockquote>
<hr>
<h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor()"></a><code>constructor()</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">constructor</span>(props)</div></pre></td></tr></table></figure>
<p><code>React</code>组件装载之前会执行构造方法。在子类中执行构造方法时，应该在其它声明的上方执行<code>super(props)</code>。需要注意的是，构造方法中的<code>this.props</code>会变成<code>undefined</code>。</p>
<p>在构造方法中初始化<code>state</code>很合适。如果不初始化<code>state</code>也不绑定方法，那不需要在组件中实现构造方法。</p>
<p>基于<code>props</code>初始化<code>state</code>是可以的。这些初始有效的<code>props</code>，可以直接设置到<code>state</code>中。下面是一个例子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">constructor</span>(props) &#123;</div><div class="line">  <span class="keyword">super</span>(props);</div><div class="line">  <span class="keyword">this</span>.state = &#123;</div><div class="line">    <span class="attr">color</span>: props.initialColor</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>需要注意的是，<code>state</code>不会随着<code>props</code>及时更新。可以用<code>lift the state up</code>来代替同步更新<code>props</code>给<code>state</code>。</p>
<p>如果想要使用<code>props</code>设置<code>state</code>的值，可以使用<code>componentWillReceiveProps(nextProps)</code>来同步更新<code>state</code>。但是<code>lift the state up</code>更简单而且能避免错误。</p>
<p><code>lift the state up</code>指的是把几个子类的<code>state</code>提升到他们最临近的父级里面，然后通过父级接收子类事件统一处理后，用<code>props</code>的方式再分发给子类。</p>
<hr>
<h3 id="componentWillMount"><a href="#componentWillMount" class="headerlink" title="componentWillMount()"></a><code>componentWillMount()</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">componentWillMount()</div></pre></td></tr></table></figure>
<p><code>componentWillMount()</code>是在首次装载发生之前立即调用。在<code>render()</code>之前调用，因此在这个方法里同步设置<code>state</code>不会触发重绘。避免在这个方法里引入任何副作用或者订阅。</p>
<p>这只是一个声明周期钩子。通常推荐使用<code>constructor()</code>。</p>
<hr>
<h3 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount()"></a><code>componentDidMount()</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">componentDidMount()</div></pre></td></tr></table></figure>
<p><code>componentDidMount()</code>是在首次装载完成之后立即被调用。这里获取<code>DOM</code>元素最合适。如果有从远端请求数据的需求，可以在这里初始化网络请求。在这里设置<code>state</code>会触发重绘。</p>
<hr>
<h3 id="componentWillReceiveProps"><a href="#componentWillReceiveProps" class="headerlink" title="componentWillReceiveProps()"></a><code>componentWillReceiveProps()</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">componentWillReceiveProps(nextProps)</div></pre></td></tr></table></figure>
<p><code>componentWillReceiveProps()</code>是在更新属性准备重绘之前调用。如果你需要根据新的<code>props</code>来修改<code>state</code>，你可以拿比较<code>this.props</code>和<code>nextProps</code>后的结果交给<code>this.setState()</code>来完成<code>state</code>的转换。</p>
<p>注意<code>props</code>没有改变的时候也会触发该方法，所以如果只是想处理改变，那请确保比较了当前值和最新值。父组件可能会导致组件重绘。</p>
<p>首次装载时不会调用<code>componentWillReceiveProps</code>。如果组件的<code>props</code>更新会调用这个方法。通常调用<code>this.setState</code>不会触发<code>componentWillReceiveProps</code>。</p>
<hr>
<h3 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate()"></a><code>shouldComponentUpdate()</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">shouldComponentUpdate(nextProps, nextState)</div></pre></td></tr></table></figure>
<p>使用<code>shouldComponentUpdate()</code>是为了让<code>React</code>知道当前<code>props</code>或<code>state</code>的更新是否影响到组件的输出。默认是每次<code>state</code>的更新都会重绘，多数情况下应该依靠默认行为。</p>
<p><code>shouldComponentUpdate()</code>是在新的<code>props</code>或<code>state</code>被接收准备重绘之前被调用。默认返回<code>true</code>。首次装载或使用<code>forceUpdate()</code>时，该方法不被调用。</p>
<p>如果子组件的<code>state</code>改变了，那即便父组件的该方法返回<code>false</code>，子组件依旧会重绘。</p>
<p>如果<code>shouldComponentUpdate()</code>返回<code>false</code>，那么<code>componentWillUpdate()</code>、<code>render()</code>和<code>componentDidUpdate()</code>都不会被调用。需要注意的是，<code>React</code>在未来可能会对待<code>shouldComponentUpdate()</code>作为一种暗示，为非一个严格的指令，返回<code>false</code>也会重绘组件。</p>
<p>如果你确定特定组件在解析时很慢，可以换用继承<code>React.PureComponent</code>，<code>React.PureComponent</code>没有实现浅比较<code>props</code>和<code>state</code>的<code>shouldComponentUpdate()</code>。如果你有信心自己手写，可以比较<code>this.props</code>与<code>nextProps</code>和<code>this.state</code>与<code>nextState</code>来判断更新可以跳过。</p>
<p>对于复杂的数据的比较是非常耗时的，而且可能无法比较，通过使用<code>Immutable.js</code>能够很好地解决这个问题，<code>Immutable.js</code>的基本原则是对于不变的对象返回相同的引用，而对于变化的对象，返回新的引用。</p>
<hr>
<h3 id="componentWillUpdate"><a href="#componentWillUpdate" class="headerlink" title="componentWillUpdate()"></a><code>componentWillUpdate()</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">componentWillUpdate(nextProps, nextState)</div></pre></td></tr></table></figure>
<p><code>componentWillUpdate()</code>是在更新<code>props</code>或<code>state</code>准备重绘之前被调用。这是在发生更新之前做准备的时机。首次装载的时候没有调用这个方法。</p>
<p>注意不能在这里调用<code>this.setState()</code>，应该使用<code>componentWillReceiveProps()</code>来根据<code>props</code>更新<code>state</code>。</p>
<blockquote>
<p>Note</p>
<p>如果<code>shouldComponentUpdate()</code>返回false，那么<code>componentWillUpdate()</code>不会被调用</p>
</blockquote>
<hr>
<h3 id="componentDidUpdate"><a href="#componentDidUpdate" class="headerlink" title="componentDidUpdate()"></a><code>componentDidUpdate()</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">componentDidUpdate(prevProps, prevState)</div></pre></td></tr></table></figure>
<p><code>componentDidUpdate()</code>是在重绘之后执行，首次装载时不会触发。</p>
<p>可以在这个时机操作组件更新完成后的<code>DOM</code>。可以比较<code>props</code>的改变在这里做网络请求。（<code>props</code>如果没有改变，可能不需要发起网络请求）。</p>
<blockquote>
<p>Note</p>
<p>如果<code>shouldComponentUpdate()</code>返回false，那么<code>componentDidUpdate()</code>不会被调用</p>
</blockquote>
<hr>
<h3 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount()"></a><code>componentWillUnmount()</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">componentWillUnmount()</div></pre></td></tr></table></figure>
<p><code>componentWillUnmount()</code>在组件被卸载和销毁之前会被调用。在这个方法里执行必要的清理工作，比如没用的计时器，取消网络请求，或者是清除在<code>componentDidMount</code>执行时创建的<code>DOM</code>元素。</p>
<hr>
<h3 id="setState"><a href="#setState" class="headerlink" title="setState()"></a><code>setState()</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setState(updater, [callback])</div></pre></td></tr></table></figure>
<p><code>setState()</code>更新组件<code>state</code>，并且告诉<code>React</code>这个组件需要根据<code>state</code>的更新来重绘，但只是加入到执行队列。这是一个更新用户操作和处理服务端数据的主要方法。</p>
<p>请把<code>setState()</code>当做一个请求而非立即执行方法。在单线程执行多个组件时，给了更好的性能，<code>React</code>可能会延迟执行它。<code>React</code>不能保证<code>state</code>更新被立即执行。</p>
<p><code>setState()</code>不总是立即更新组件。它会把<code>JavaScript</code>执行进度中调用的<code>setState()</code>合并在一起，延迟执行。在<code>setState()</code>之后读取<code>this.state</code>是有问题的。用来代替的是，使用<code>componentDidUpdate</code>或者一个<code>setState</code>回调(<code>setState(updater, callback)</code>)，或者是更新完成后保证可以被触发的方法。如果你需要前一个<code>state</code>来设置当前<code>state</code>，请看下面的<code>updater</code>。</p>
<p><code>setState()</code>总是会触发重绘，除非<code>shouldComponentUpdate()</code>返回<code>false</code>。如果由于对象很复杂没办法使用<code>shouldComponentUpdate()</code>来判断是否重绘，可以执行<code>setState()</code>在新的<code>state</code>与原有<code>state</code>存在变更的时候来避免不必要的重绘。</p>
<p>第一个参数可以是像这样的<code>updater</code>方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(prevState, props) =&gt; nextState</div></pre></td></tr></table></figure>
<p><code>prevState</code>是对之前<code>state</code>的引用。不应该直接改变。应该通过根据<code>prevState</code>和<code>props</code>的输入构建一个新的状态对象来表示更改。例如，假设我们想根据<code>props.step</code>增加一个变量值：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.setState(<span class="function">(<span class="params">prevState, props</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> &#123;<span class="attr">counter</span>: prevState.counter + props.step&#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><code>updater</code>收到的<code>prevState</code>和<code>props</code>都是最新的。</p>
<p><code>setState()</code>第二个参数是一个可选的回调方法，一旦<code>setState</code>执行完并且组件重绘完时执行。通常推荐使用<code>componentDidUpdate()</code>。</p>
<p>也可以通过第一个参数为对象给<code>setState()</code>代替方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setState(stateChange, [callback])</div></pre></td></tr></table></figure>
<p>会执行一个浅复制<code>stateChange</code>到新的<code>state</code>，例如调整购物车商品数量：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.setState(&#123;<span class="attr">quantity</span>: <span class="number">2</span>&#125;)</div></pre></td></tr></table></figure></p>
<p>这种格式的<code>setState()</code>也是异步的，并且同一个生命周期的多次请求会合并在一起。比如想在同一个生命周期加入增加数量，结果相当于：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.assign(</div><div class="line">  previousState,</div><div class="line">  &#123;<span class="attr">quantity</span>: state.quantity + <span class="number">1</span>&#125;,</div><div class="line">  &#123;<span class="attr">quantity</span>: state.quantity + <span class="number">1</span>&#125;,</div><div class="line">  ...</div><div class="line">)</div></pre></td></tr></table></figure>
<p>在同一生命周期中后续请求会覆盖之前请求，所以数量只会增加一次。如果后面的<code>state</code>依赖前面的<code>state</code>，推荐使用<code>updater</code>方法代替：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.setState(<span class="function">(<span class="params">prevState</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> &#123;<span class="attr">counter</span>: prevState.quantity + <span class="number">1</span>&#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<hr>
<h3 id="forceUpdate"><a href="#forceUpdate" class="headerlink" title="forceUpdate()"></a><code>forceUpdate()</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">component.forceUpdate(callback)</div></pre></td></tr></table></figure>
<p>默认，如果组件里面的<code>state</code>或者<code>props</code>更新，组件会重绘。但是如果<code>render()</code>调用依赖其它的数据，可以通过<code>forceUpdate()</code>来触发组件渲染。</p>
<p>调用<code>forceUpdate()</code>会导致组件<code>render()</code>执行，并且跳过<code>shouldComponentUpdate()</code>。这将触发子组件的正常生命周期方法，包括每个子组件的<code>shouldComponentUpdate()</code>。如果标记更新，<code>React</code>会仅仅修改<code>DOM</code>。</p>
<p>通常应该避免使用<code>forceUpdate()</code>并且只使用<code>this.props</code>和<code>this.state</code>来读取。</p>
<hr>
<h2 id="类属性-1"><a href="#类属性-1" class="headerlink" title="类属性"></a>类属性</h2><h3 id="defaultProps"><a href="#defaultProps" class="headerlink" title="defaultProps"></a><code>defaultProps</code></h3><p><code>defaultProps</code>可以用来定义组件自己的默认属性，设置类的默认<code>props</code>。这是使用于未声明的<code>props</code>，但不使用于空<code>props</code>。例如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">CustomButton.defaultProps = &#123;</div><div class="line">  <span class="attr">color</span>: <span class="string">'blue'</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>如果<code>props.color</code>没有被提供，它会被默认设置为<code>&#39;blue&#39;</code>：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">render() &#123;</div><div class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">CustomButton</span> /&gt;</span> ; // props.color会被设置为blue</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果<code>props.color</code>被设置为<code>null</code>，那它就是<code>null</code>：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">render() &#123;</div><div class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">CustomButton</span> <span class="attr">color</span>=<span class="string">&#123;null&#125;</span> /&gt;</span> ; // props.color会被设置为null</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="displayName"><a href="#displayName" class="headerlink" title="displayName"></a><code>displayName</code></h3><p><code>displayName</code>被用作<code>debug</code>信息。</p>
<hr>
<h2 id="实例属性-1"><a href="#实例属性-1" class="headerlink" title="实例属性"></a>实例属性</h2><h3 id="props"><a href="#props" class="headerlink" title="props"></a><code>props</code></h3><p><code>this.props</code>包含组件调用者定义的<code>props</code>。尤其是，<code>this.props.children</code>是一个特殊的属性，通常由JSX表达式中的子标签定义，而不是标记本身。</p>
<h3 id="state"><a href="#state" class="headerlink" title="state"></a><code>state</code></h3><p><code>state</code>包含特定于该组件的状态，随时间而改变。<code>state</code>是用户自定义的，应该是一个清晰的<code>JavaScript</code>对象。</p>
<p>不要直接改变<code>this.state</code>，因为<code>setState()</code>可能会替换你的改变。把<code>this.state</code>当做不可变的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Components用来把UI拆分成独立的，可重复使用的部分，然后做不同的考量。&lt;code&gt;React.Component&lt;/code&gt;由&lt;code&gt;React&lt;/code&gt;提供。&lt;/p&gt;
    
    </summary>
    
      <category term="reprint" scheme="http://gaoxuefeng.com/categories/reprint/"/>
    
    
      <category term="react" scheme="http://gaoxuefeng.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>丽江游记</title>
    <link href="http://gaoxuefeng.com/2017/04/23/%E4%B8%BD%E6%B1%9F%E6%B8%B8%E8%AE%B0/"/>
    <id>http://gaoxuefeng.com/2017/04/23/丽江游记/</id>
    <published>2017-04-23T09:28:28.000Z</published>
    <updated>2017-05-01T06:41:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>突然好想回学校的读书馆看看书，体育场跑跑步，教室里面写写代码，找回一点迷失的自我。上周我趁着工作内容转变的空挡，来了一场说走就走的旅行，心情舒畅了不少，记录一下作为留念。</p>
<a id="more"></a>
<h2 id="要去丽江啦"><a href="#要去丽江啦" class="headerlink" title="要去丽江啦"></a>要去丽江啦</h2><p>从过年回来到清明节一直在日夜加班，我轮过了清明节值班的岗后，调休了5天的时间来了一场一个人的旅行。</p>
<p>出发前两天，和朋友去看了梁静茹的演唱会，这是期待已久的，也是稍有点可惜的，身边人不是自己的女朋友。不是大爱梁静茹，但是她的演唱会非常适合情侣，月亮、铁塔、小屋和吊灯，都是温馨浪漫的元素，令人自然的投入情景。还有值得一提的是梁静茹在演唱会结尾的时候唱了一首李宗盛写的『诱惑的街』，她坦言之前导演没有安排是自己想唱这首歌，唱的是她对李宗盛这位恩师的感情，她怀有的那颗岁月不改的感恩的心，希望自己也不会背弃。</p>
<p>出发前一天，为了不被工作上的事烦到，写了一天代码，保证没问题后，当晚把测试手机送回公司，离公司近就是好，没事骑车吹吹风就到了。从公司回来开始定机票，发现北京直飞丽江的只有下午的，想了想还是定了，图个省事。回来的时候才发现，提前订机票便宜的多，白花了不少钱，心痛。</p>
<p>出发当天，由于是下午的航班，悠哉悠哉的起床，吃午饭，去机场。到了机场犯了个傻事，我看到有个地方有人在排队办理，我也跟着排队，到我的时候：</p>
<ul>
<li>工作人员：『把包放在传送带上，包里有充电宝么？』</li>
<li>我：     『有啊。』</li>
<li>工作人员：『充电宝是不能托运的，得拿出去。』</li>
<li>我：     『那我可以不托运么？』</li>
<li>工作人员：『可以。。。。』（内心：那你来办啥托运？）</li>
</ul>
<p>我对那个工作人员的眼神记得很清楚，里面透露着『不知道你还有没有救了，但还是祝你安好』。</p>
<p>由于飞机晚点，终于在周一晚上22点时候坐上了客栈的接机小巴，一路上外面黑漆漆的，什么也看不清，来到古城边上也是一样，完全看不到里面什么样子，到了客栈后定了第二天的玉龙雪山之行后就睡觉了。</p>
<h2 id="去登雪山喽"><a href="#去登雪山喽" class="headerlink" title="去登雪山喽"></a>去登雪山喽</h2><p>周二这天6点半就起床来洗漱，然后在『古城北门停车场』买了小笼包子等司机师傅，丽江的温差很大，虽然为了去雪山特意穿了毛衣和秋裤，但一早上还是非常冷的。师傅很准时的到了，车上算司机和我一共7个人，一伙是东北三大姐，一伙是云南本地小夫妻，出发去雪山，路上听他们说只有没风的时候才能上雪山的，这天刚刚好，非常幸运。</p>
<p>第一站是甘海子，雪山下的一块石碑，名字由来是原本这个地方是一片海，后来由于地壳运动干涸了，所以叫甘海子。。。。乍一看如此文艺的名字，由来真是有够直白的。这里没拍照，因为太多人站在石碑上留念，而我只想拍风景，这时候下起了小雨，有点春天的气息。</p>
<p>第二站是蓝月谷，就在雪山脚下，在这里看雪山阴沉沉的，云雾缭绕。蓝月谷的湖水源于雪山化雪，蓝的透彻，绿的清晰，我一路走到源头看那几条涓涓细流，很难想象那么多的名川大湖都源于这样的溪流。</p>
<p>第三站是玉龙雪山，这时候天空已经放晴了，山脚下排队坐索道，有一个拐了20次的护栏，开始前面没几个人的时候，在护栏里跑起来，每拐一次都和前面的女生对一次眼，会有一点点暧昧的感觉。坐上索道之后，慢慢沿着山脉上升，时不时抖动一下，刺激！在一个四面是玻璃的笼子里，没有了那种『不识庐山真面目，只缘身在此山中』的烦恼，树在脚下，山在身边，雪在头顶，人间在远方。</p>
<p>雪山上非常冷，有很大的风，一定要穿租好的羽绒服。我一来到雪山上，HIGH到不行，疯了一样，看着远方的云，草地，房屋，心旷神怡，看着头顶的雪山，那么酷，太酷了。雪山有种魔力，让我狂妄，让我与天比高，让我不在计较眼前的苟且。</p>
<p>下山之后才发现同行的人早就下去了，等我一个小时，不是所有人都像我一样。回去的路上，景色非常好，两边是雪山，近点是稀疏的树木，灌木，小人工湖，前方是一条笔直的公路，很像是电影中看到的美国西部，很是喜欢，但是身边的人都在睡觉，我用相机照相的话会有咔咔的快门声，就作罢了。</p>
<p>回古镇的路上听司机师傅讲泸沽湖边的摩梭族的走婚的习俗，男不娶女不嫁，青年男女在篝火晚会上会通过敲手节来表达爱意，两厢同意后，男方会在晚上翻墙进到女方家里同房，生下孩子由女生家庭照顾，男方不养自己的孩子，养姐妹的孩子，这种走婚只依赖感情，与一切经济利益无关。</p>
<h2 id="丽江古城"><a href="#丽江古城" class="headerlink" title="丽江古城"></a>丽江古城</h2><p>周二从雪山回来的时候才16点，等到18点的时候去逛丽江古城。（白天进古城要收80块的古城维护费，18点之后去就不收了。）在古城里基本就是瞎走，先去五一街，再去万古楼，找了个叫『第一观景台』的酒吧点了杯咖啡装文艺。看着夜晚的古城，看着山边一点点光露出来，直到整个月亮升起来，听着弹吉他的女歌手，很是惬意。四方街很多人，但不是每条路上都很多人，我走了一条沿着小溪的路，明月当空，小桥流水，桃花灯影，屋檐鳞次，满满的诗情画意，不过女孩子千万不要自己乱走，一定要主要自身安全。</p>
<h2 id="香格里拉"><a href="#香格里拉" class="headerlink" title="香格里拉"></a>香格里拉</h2><p>同样是起了一个大早，在『古城北门停车场』买了小笼包子等司机师傅，师傅早了一些的来接我，我们一行人两对情侣，两个独行客，我默认就和另一个独行的姑娘组队了。</p>
<p>我们先到达了虎跳峡，长江上游一段很险峻的峡谷，因为正值春季，所以水量还不是很大。就随便拍拍照，然后聊聊天，中午在一家吃了一家很随便的农家乐，大家聊了聊从哪里来，在丽江都去了哪里，</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;突然好想回学校的读书馆看看书，体育场跑跑步，教室里面写写代码，找回一点迷失的自我。上周我趁着工作内容转变的空挡，来了一场说走就走的旅行，心情舒畅了不少，记录一下作为留念。&lt;/p&gt;
    
    </summary>
    
      <category term="create" scheme="http://gaoxuefeng.com/categories/create/"/>
    
    
      <category term="旅游" scheme="http://gaoxuefeng.com/tags/%E6%97%85%E6%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative动画</title>
    <link href="http://gaoxuefeng.com/2017/04/22/ReactNative%E5%8A%A8%E7%94%BB/"/>
    <id>http://gaoxuefeng.com/2017/04/22/ReactNative动画/</id>
    <published>2017-04-22T08:07:31.000Z</published>
    <updated>2017-05-02T01:54:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>一直蛮热衷于动画效果开发的，前段时间用ReactNative开发了一个动画效果，个人挺满意的，在这里分享一下</p>
<a id="more"></a>
<h2 id="ReactNative动画API"><a href="#ReactNative动画API" class="headerlink" title="ReactNative动画API"></a>ReactNative动画API</h2><p><strong>LayoutAnimation</strong></p>
<p>当布局变化时，自动将视图运动到它们新的位置上。只对布局的创建和更新时才起作用，删除时不起作用，动画属性也比较少，只有透明度和缩放两种，优点是性能好，使用简单，全局作用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  Text,</div><div class="line">  View,</div><div class="line">  UIManager,</div><div class="line">  LayoutAnimation</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> CustomLayoutAnimation = &#123;</div><div class="line">    <span class="attr">duration</span>: <span class="number">150</span>,</div><div class="line">    <span class="attr">create</span>: &#123;</div><div class="line">        <span class="attr">type</span>: LayoutAnimation.Types.easeIn,</div><div class="line">        <span class="attr">property</span>: LayoutAnimation.Properties.opacity</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">LayoutAnimationView</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">constructor</span>(props: Object) &#123;</div><div class="line">        <span class="keyword">super</span>(props);</div><div class="line">		<span class="comment">// android使用LayoutAnimation需要开启动画设置，ios默认打开</span></div><div class="line">		UIManager &amp;&amp; UIManager.setLayoutAnimationEnabledExperimental(<span class="literal">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    componentWillMount() &#123;</div><div class="line">		<span class="comment">/*</span></div><div class="line">		 * 这个例子的使用场景是：首次渲染页面，一边异步请求数据，一边页面显示加载中</div><div class="line">		 * 拿到数据后使用渐变的效果显示完整页面</div><div class="line">		*/</div><div class="line">        LayoutAnimation.configureNext(CustomLayoutAnimation);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span><span class="tag">&lt;/<span class="name">View</span>&gt;</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直蛮热衷于动画效果开发的，前段时间用ReactNative开发了一个动画效果，个人挺满意的，在这里分享一下&lt;/p&gt;
    
    </summary>
    
      <category term="create" scheme="http://gaoxuefeng.com/categories/create/"/>
    
    
      <category term="react" scheme="http://gaoxuefeng.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>linux命令学习笔记（一）</title>
    <link href="http://gaoxuefeng.com/2016/06/14/linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://gaoxuefeng.com/2016/06/14/linux命令学习笔记（一）/</id>
    <published>2016-06-14T14:28:24.000Z</published>
    <updated>2016-06-15T05:10:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于一下工作中用到的 linux 命令，每次遇到点问题都 google 好烦</p>
<a id="more"></a>
<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ul>
<li>创建文件夹 <code>mkdir file</code></li>
<li>删除文件 <code>rm -rf file</code></li>
<li>文件重命名 <code>mv file1 file2</code></li>
<li>复制文件 <code>cp file1 file2</code></li>
<li>查找文件 <code>find . -name &#39;file&#39;</code></li>
<li>分析一行 <code>grep [--color=auto] &#39;查找字符串&#39; filename</code></li>
<li>打印日志 <code>tail -f xxxlog</code></li>
<li>获取指定程序的进程 <code>ps -ef|grep 指定程序</code></li>
<li>查看运行程序的状态 <code>netstat -tunpl</code></li>
<li>杀死进程 <code>kill -9 pid</code></li>
</ul>
<h2 id="linux-bash-shell中获取本机ip地址"><a href="#linux-bash-shell中获取本机ip地址" class="headerlink" title="linux bash shell中获取本机ip地址"></a>linux bash shell中获取本机ip地址</h2><ul>
<li><p>方法一：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/sbin/ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk &apos;&#123;print $2&#125;&apos;|tr -d &quot;addr:&quot;</div><div class="line">or</div><div class="line">/sbin/ifconfig|sed -n &apos;/inet addr/s/^[^:]*:\([0-9.]\&#123;7,15\&#125;\) .*/\1/p&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>方法二： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">local_host=&quot;`hostname --fqdn`&quot;</div><div class="line">local_ip=`host $local_host 2&gt;/dev/null | awk &apos;&#123;print $NF&#125;&apos;`</div><div class="line">echo $local_ip</div></pre></td></tr></table></figure>
</li>
<li><p>方法三：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">local_host=&quot;`hostname --fqdn`&quot;</div><div class="line">nslookup -sil $local_host 2&gt;/dev/null | grep Address: | sed &apos;1d&apos; | sed &apos;s/Address://g&apos;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="从一个机器传到另一个机器"><a href="#从一个机器传到另一个机器" class="headerlink" title="从一个机器传到另一个机器"></a>从一个机器传到另一个机器</h2><p>本机IP：192.168.138.150</p>
<p>要传送的IP地址为：192.168.138.151</p>
<p>任务：拷贝/etc/ha.d/ldirectord.cf文件到151机器上，地址为：/etc/ha.d</p>
<p>在本机上操作，使用命令scp：</p>
<p>以下操作是从本地拷贝到服务器上</p>
<p>scp /etc/ha.d/ldirectord.cf root@192.168.138.151:/etc/ha.d</p>
<h2 id="Linux下查看、关闭及开启防火墙命令"><a href="#Linux下查看、关闭及开启防火墙命令" class="headerlink" title="Linux下查看、关闭及开启防火墙命令"></a>Linux下查看、关闭及开启防火墙命令</h2><ul>
<li>永久性生效，重启后不会复原 <blockquote>
<p>开启： chkconfig iptables on<br>关闭： chkconfig iptables off </p>
</blockquote>
</li>
<li>即时生效，重启后复原 <blockquote>
<p>开启： service iptables start<br>关闭： service iptables stop<br>需要说明的是对于Linux下的其它服务都可以用以上命令执行开启和关闭操作。<br>在开启了防火墙时，做如下设置，开启相关端口， 修改/etc/sysconfig/iptables 文件，添加以下内容：<br><code>-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT</code><br><code>-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT</code></p>
</blockquote>
</li>
<li>查看防火墙状态<blockquote>
<p>chkconfig iptables –list</p>
</blockquote>
</li>
</ul>
<h2 id="memcached启动脚本"><a href="#memcached启动脚本" class="headerlink" title="memcached启动脚本"></a>memcached启动脚本</h2><p><code>/usr/local/bin/memcached -d -m 6144 -u root -l 192.168.1.151 -p 12000 -c 256 -P /tmp/memcached.pid</code></p>
<ul>
<li>-d 选择是启动一个守护的进程</li>
<li>-m 设置内存大小</li>
<li>-u 是运行memcache的用户</li>
<li>-l 是监听的服务器Ip地址</li>
<li>-p 是社会memcache监听的端口号</li>
<li>-c 选项是最大的并发连接数</li>
<li>-p 是设置保存Memcache的pid文件</li>
</ul>
<h2 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h2><p>su root（对应用户）<br>su 后面不加用户是默认切到 root<br>su 是不改变当前变量<br><code>su -</code> 是改变为切换到用户的变量<br>也就是说 su 只能获得 root 的执行权限，不能获得环境变量<br>而 <code>su -</code> 是切换到 root 并获得 root 的环境变量及执行权限</p>
<h2 id="vim设置"><a href="#vim设置" class="headerlink" title="vim设置"></a>vim设置</h2><p>设置编码： <code>set encoding=utf-8</code></p>
<p>粘贴代码缩进混乱：取消自动缩进<code>set paste</code>，敲代码的时候再设置回来<code>set nopaste</code></p>
<blockquote>
<p>注：在 normal 模式，输入 <code>:</code> 然后设置</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于一下工作中用到的 linux 命令，每次遇到点问题都 google 好烦&lt;/p&gt;
    
    </summary>
    
      <category term="work" scheme="http://gaoxuefeng.com/categories/work/"/>
    
    
      <category term="linux" scheme="http://gaoxuefeng.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>小知识点（一）</title>
    <link href="http://gaoxuefeng.com/2016/06/12/%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://gaoxuefeng.com/2016/06/12/小知识点（一）/</id>
    <published>2016-06-12T06:41:22.000Z</published>
    <updated>2016-06-13T11:38:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>一些零星的知识点，在这里整理记录一下</p>
<a id="more"></a>
<h2 id="展现评分的星星"><a href="#展现评分的星星" class="headerlink" title="展现评分的星星"></a>展现评分的星星</h2><p>在豆瓣浏览电影的时候，我们会看到每部电影都有相应的评分，这些评分可能是 8.1 ，也可能是 7.6 ，每个评分前都有5个星星表示这个评分，评分是 8 则意味着四颗橙色星星，一颗灰色星星，而评分是 8.1 就无法用一颗完整的星星表示，我用下面的方法完成这种情况</p>
<p>思路：写两个 div , 一个 div 里面依次排列5个灰色星星，我们叫它『灰div』，另一个 div 里面依次排列5个橙色星星，我们叫它『橙div』，『灰div』写在『橙div』前面，我们利用定位把两个 div 重叠在一起，用『橙div』覆盖『灰div』，然后控制『橙div』的宽度为评分对应的百分比，就 OK 了</p>
<p>具体代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    	<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon"</span>&gt;</span>*<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon"</span>&gt;</span>*<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon"</span>&gt;</span>*<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon"</span>&gt;</span>*<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon"</span>&gt;</span>*<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:81%"</span>&gt;</span></div><div class="line">    	<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon star"</span>&gt;</span>*<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon star"</span>&gt;</span>*<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon star"</span>&gt;</span>*<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon star"</span>&gt;</span>*<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon star"</span>&gt;</span>*<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"star"</span>&gt;</span>8.1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.wrapper</span> &#123;</div><div class="line">	<span class="attribute">display</span>: inline-block;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">white-space</span>: nowrap;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.wrapper</span> &gt; <span class="selector-tag">div</span> &#123;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.wrapper</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(1)</span> &gt; <span class="selector-tag">i</span> &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#ddd</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.wrapper</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">z-index</span>: <span class="number">2</span>;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.star</span> &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#ff6600</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="移动端页面回退下拉列表状态不一致"><a href="#移动端页面回退下拉列表状态不一致" class="headerlink" title="移动端页面回退下拉列表状态不一致"></a>移动端页面回退下拉列表状态不一致</h2><p>当我在『原页面』用下拉列表选择某选项后，页面局部刷新了，然后我点击跳转到别的页面，这时候我回退到『原页面』，发现页面回到最初状态，而下拉列表停留在选择后状态，这明显不对了。而且，上述问题出现在chrome模拟状态下，手机百度和safari有这样的问题，我在uc浏览器测试，却发现下拉列表恢复到了默认选项，也就是各个浏览器表现不近相同</p>
<p>解决：问题分为两部分解决，第一部分监听 window 的 pageshow 事件，来判断回退触发；第二部分，在小伙伴的细心观察下，发现虽然下拉列表显示选项是选择后状态，但是其实下拉列表的 selected 是恢复到默认状态的，所以解决方法就简单了，直接重置 selected 属性就OK了</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'pageshow'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">    $(<span class="string">'down'</span>).find(<span class="string">'[selected="1"]'</span>).removeAttr(<span class="string">'selected'</span>).attr(<span class="string">'selected'</span>, <span class="string">'1'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="网络连接状态"><a href="#网络连接状态" class="headerlink" title="网络连接状态"></a>网络连接状态</h2><p>本来的初衷是获取联网状态，2G、3G、4G或wifi这样的信息， W3C 的规范中给出了一个方法来获得现在的网络状态 navigator.connection ，能够获取联网状态信息，但是兼容十分不好，不得不放弃选择其次只获取网络连接状态</p>
<p>一个属性， navigator.onLine ，true 表示在线， false 表示离线；两个监听事件， online 监听在线， offline 监听离线</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (navigator.onLine) &#123;</div><div class="line">        <span class="comment">/*  在线 doing... */</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">/*  离线 doing... */</span></div><div class="line">    &#125;</div><div class="line">&#125;, <span class="literal">false</span>);</div><div class="line"></div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'online'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="comment">/*  在线 doing... */</span></div><div class="line">&#125;, <span class="literal">false</span>);</div><div class="line"></div><div class="line"></div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'offline'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="comment">/*  离线 doing... */</span></div><div class="line">&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些零星的知识点，在这里整理记录一下&lt;/p&gt;
    
    </summary>
    
      <category term="work" scheme="http://gaoxuefeng.com/categories/work/"/>
    
    
      <category term="javascript" scheme="http://gaoxuefeng.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>html5的video元素学习手札</title>
    <link href="http://gaoxuefeng.com/2016/05/19/html5%E7%9A%84video%E4%BA%8B%E4%BB%B6%E5%AD%A6%E4%B9%A0%E6%89%8B%E6%9C%AD/"/>
    <id>http://gaoxuefeng.com/2016/05/19/html5的video事件学习手札/</id>
    <published>2016-05-19T05:23:06.000Z</published>
    <updated>2016-06-13T09:30:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>为了监控移动端视频播放的情况，研究了一下 html5 <code>&lt;video&gt;</code> 标签的属性与事件触发，及其在各系统和各个浏览器的兼容情况</p>
<a id="more"></a>
<h2 id="属性与事件"><a href="#属性与事件" class="headerlink" title="属性与事件"></a>属性与事件</h2><p>理解清楚属性和事件，才能更好的使用 video ，达到预期的效果，更好的检测视频播放的状况来做出分析和调整，这里仅列举了解到且大致理解的，更多相关后续补充</p>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p><code>&lt;video&gt;</code> 标签嵌入到HTML文档中</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span> <span class="attr">autoplay</span>=<span class="string">"autoplay"</span> <span class="attr">controls</span>=<span class="string">""</span> <span class="attr">poster</span>=<span class="string">""</span> <span class="attr">preload</span>=<span class="string">"none"</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></div></pre></td></tr></table></figure>
<p>初始化 <code>&lt;video&gt;</code> 标签时主要设置的属性</p>
<ol>
<li>src：要嵌到页面的视频的URL。可选；你也可以使用video块内的 <code>&lt;source&gt;</code> 元素来指定需要嵌到页面的视频</li>
<li>autoplay：布尔属性；指定后，视频会马上自动开始播放，不会停下来等着数据载入结束</li>
<li>controls：加上这个属性，Gecko 会提供用户控制，允许用户控制视频的播放，包括音量，跨帧，暂停/恢复播放</li>
<li>poster：一个海报帧的URL，用于在用户播放或者跳帧之前展示。如果属性未指定，那么在第一帧可用之前什么都不会展示；之后第一帧就像海报帧一样展示</li>
<li>preload：该枚举属性旨在告诉浏览器作者认为达到最佳的用户体验的方式是什么。可能是下列值之一：<ul>
<li>none：提示作者认为用户不需要查看该视频，服务器也想要最小化访问流量；换句话说就是提示浏览器该视频不需要缓存</li>
<li>metadata：提示尽管作者认为用户不需要查看该视频，不过抓取元数据（比如：长度）还是很合理的</li>
<li>auto：用户需要这个视频优先加载；换句话说就是提示：如果需要的话，可以下载整个视频，即使用户并不一定会用它</li>
<li>空字符串：也就代指 auto 值</li>
</ul>
</li>
<li>buffered：这个属性可以读取到哪段时间范围内的媒体被缓存了。该属性包含了一个 TimeRanges 对象</li>
<li>played：一个 TimeRanges 对象，指明了视频已经播放的所有范围</li>
<li>loop：布尔属性；指定后，会在视频结尾的地方，自动返回视频开始的地方</li>
<li>muted：布尔属性，指明了视频里的音频的默认设置。设置后，音频会初始化为静音。默认值是 false ,意味着视频播放的时候音频也会播放</li>
<li>height：视频展示区域的高度，单位是 CSS 像素</li>
<li>width：视频显示区域的宽度，单位是 CSS 像素</li>
<li>crossorigin：该枚举属性指明抓取相关图片是否必须用到CORS（跨域资源共享）。 支持CORS的资源 可在 <code>&lt;canvas&gt;</code>元素中被重用，而不会被污染。允许的值如下：<ul>
<li>anonymous：跨域请求会被执行，但是不发送凭证。</li>
<li>use-credentials：跨域请求A cross-origin request会被执行，且凭证会被发送。</li>
</ul>
</li>
</ol>
<p>TimeRanges 对象表示事件段，比如，视频快进的时间段，有一个 length 属性，表示时间段的个数，有两个方法 start() 和 end() ，分别返回时间段开始的时间点和结束的时间点</p>
<p>事件交互中主要使用的属性</p>
<ol>
<li>currentTime：播放进行到的时间点，单位为秒</li>
<li>duration：视频总时长，单位为秒</li>
</ol>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>还有更多事件api，这里只列举了试过的</p>
<ol>
<li>playing：在媒体开始播放时触发（不论是初次播放、在暂停后恢复、或是在结束后重新开始）</li>
<li>ended：播放结束时触发</li>
<li>pause：播放暂停时触发</li>
<li>waiting：在一个待执行的操作（如回放）因等待另一个操作（如跳跃或下载）被延迟时触发</li>
<li>timeupdate：元素的 currentTime 属性表示的时间已经改变</li>
<li>seeking：    在跳跃操作开始时触发</li>
<li>seeked：在跳跃操作完成时触发</li>
<li>error：在发生错误时触发。元素的 error 属性会包含更多信息</li>
<li>loadeddata： 媒体的第一帧已经加载完毕</li>
</ol>
<h2 id="监控指标"><a href="#监控指标" class="headerlink" title="监控指标"></a>监控指标</h2><ol>
<li>播放：start：1（首次播放）2（重播）</li>
<li>播放：end：1</li>
<li>播放暂停：pause：1</li>
<li>播放中止：pause：1</li>
<li>快进/快退：Jump：1（快进）2（快退）</li>
<li>错误：fail： 1（取回过程）；2（当下载时发生错误）；3（当解码时发生错误）；4（不支持音频/视频）</li>
<li>播放等待： wait：1</li>
<li>播放时长：totaltime：秒（包含重播）</li>
</ol>
<p>其中1，2，3，5，6，7都很好监控，对相应事件进行监听就可以了，这里主要讲下是怎么监控播放中止和播放时长的</p>
<h2 id="播放中止"><a href="#播放中止" class="headerlink" title="播放中止"></a>播放中止</h2><p>具体场景是移动端浏览器切换tab导致的隐藏和用户按home键退出浏览器</p>
<p>html5 提供了 Page Visibility API 来支持监听tab切换，与之对应新增了</p>
<ul>
<li>document.hidden 属性，它显示页面是否为用户当前观看的页面，值为 ture 或 false</li>
<li>document.visibilityState 属性， visible 表示页面被展现， hidden 表示页面未被展现， prerender 表示页面在重新生成，用户不可见</li>
<li>visibilitychange 事件，监听页面在 visible 与 hidden 之间的切换</li>
</ul>
<p>visibilitychange事件的具体使用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> hidden;</div><div class="line"><span class="keyword">var</span> visibilityChange;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">document</span>.hidden !== <span class="string">'undefined'</span>) &#123;</div><div class="line">    hidden = <span class="string">'hidden'</span>;</div><div class="line">    visibilityChange = <span class="string">'visibilitychange'</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">document</span>.mozHidden !== <span class="string">'undefined'</span>) &#123;</div><div class="line">    hidden = <span class="string">'mozHidden'</span>;</div><div class="line">    visibilityChange = <span class="string">'mozvisibilitychange'</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">document</span>.msHidden !== <span class="string">'undefined'</span>) &#123;</div><div class="line">    hidden = <span class="string">'msHidden'</span>;</div><div class="line">    visibilityChange = <span class="string">'msvisibilitychange'</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">document</span>.webkitHidden !== <span class="string">'undefined'</span>) &#123;</div><div class="line">    hidden = <span class="string">'webkitHidden'</span>;</div><div class="line">    visibilityChange = <span class="string">'webkitvisibilitychange'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">document</span>.addEventListener(visibilityChange, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>[hidden]) &#123;</div><div class="line">        <span class="comment">// do something...</span></div><div class="line">    &#125;</div><div class="line">&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<p>关于 visibilitychange 事件的兼容性，测试了两部手机，华为mt7 和 iphone6 ，兼容情况如下</p>
<p>华为mt7</p>
<ul>
<li>qq浏览器：tab切换触发，home键退出触发</li>
<li>uc浏览器：tab切换触发，home键退出触发（退出后进程继续在跑，其它浏览器进程被暂停）</li>
<li>手机百度：tab切换不触发，home键退出不触发</li>
</ul>
<p>iphone6</p>
<ul>
<li>uc浏览器：tab切换触发，home键不触发</li>
<li>百度浏览器：同上</li>
<li>手机百度：同上</li>
<li>Safari：tab切换触发，home键退出触发</li>
</ul>
<p>由于兼容问题，且各系统的各个浏览器基本在tab切换触发，home键退出触发的情况下触发pause事件，所以播放中止的日志依旧打印pause，如果后面没有继续操作则把这个pause日志当做播放中止</p>
<p>页面刷新和浏览器tab被关闭的时候会触发 window.onunload ，也可以做为补充场景</p>
<h2 id="播放时长"><a href="#播放时长" class="headerlink" title="播放时长"></a>播放时长</h2><p>起初的思路是获取到开始播放到停止播放的事件差，记下时间点使用了 currentTime 属性，主要实现在两方面</p>
<ol>
<li>playing 时记下时间点startT， pause 和 ended 和 seeked 时记下时间点endT，endT - startT 即播放时长</li>
<li>seeked 时记下时间点startT， seeking 时记下时间点endT，endT - startT 即播放时长</li>
</ol>
<p>这个思路在 ios 下是看似没有问题的，但是 android 下确实不行，主要原因是 seeking 事件的监听没理解到位，seeking 事件触发点是用户目标跳跃到的位置，比如：视频播放在 0 秒点时，用户点击到了 60 秒点处，这是取到的 currentTime 就是 60 ，本来以为会是 0 ， ios 下看似没有问题是因为它的全屏播放模式下，进度条是要拖拽的，不能直接点击到某个点</p>
<p>于是，使用 timeupdate 来获取 seeking 触发前的时间点，就可以获取到相对准确的播放时长了</p>
<h2 id="error事件"><a href="#error事件" class="headerlink" title="error事件"></a>error事件</h2><p>监听 error 事件会返回 error.code 来标识错误类型：</p>
<ul>
<li>1 = MEDIA_ERR_ABORTED - 取回过程被用户中止</li>
<li>2 = MEDIA_ERR_NETWORK - 当下载时发生错误</li>
<li>3 = MEDIA_ERR_DECODE - 当解码时发生错误</li>
<li>4 = MEDIA_ERR_SRC_NOT_SUPPORTED - 不支持音频/视频</li>
</ul>
<p>官网的解释是：</p>
<ul>
<li>MEDIA_ERR_ABORTED (numeric value 1)<blockquote>
<p>The fetching process for the media resource was aborted by the user agent at the user’s request.<br>在取回资源过程中，被用户的操作中止（您中止了视频播放）</p>
</blockquote>
</li>
<li>MEDIA_ERR_NETWORK (numeric value 2)<blockquote>
<p>A network error of some description caused the user agent to stop fetching the media resource, after the resource was established to be usable.<br>因为一些网络问题导致的用户无法取回资源，前提是资源被确定为可用（网络问题导致视频下载中断）</p>
</blockquote>
</li>
<li>MEDIA_ERR_DECODE (numeric value 3)<blockquote>
<p>An error of some description occurred while decoding the media resource, after the resource was established to be usable.<br>解码资源时产生的问题，前提是资源被确定为可用（『a corruption problem（翻译不过来）』 或者 所使用的视频功能的浏览器不支持）</p>
</blockquote>
</li>
<li>MEDIA_ERR_SRC_NOT_SUPPORTED (numeric value 4)<blockquote>
<p>The media resource indicated by the src attribute was not suitable.<br>由src属性所指定的媒体资源不适合（视频无法加载，或因为服务器或网络故障，或格式不支持）</p>
</blockquote>
</li>
</ul>
<p>总结一下就是，1、2、3是在视频可用情况下因为外在因素导致的播放失败，4是可能因为资源本身有问题导致的播放失败（存在资源可播放也打印 error.code 为4的情况）</p>
<h2 id="遇到的一些状况"><a href="#遇到的一些状况" class="headerlink" title="遇到的一些状况"></a>遇到的一些状况</h2><ul>
<li>没有 <code>&lt;source&gt;</code> 元素且 src 属性为空时播放会触发 error 事件，状态码为4<blockquote>
<p>解决：忽略 src 属性为空时的报错</p>
</blockquote>
</li>
<li>播放结束会触发暂停<blockquote>
<p>解决：声明状态变量，随着具体操作更新状态，播放状态下才会执行暂停操作，结束状态不执行</p>
</blockquote>
</li>
<li>播放结束后重播会触发 seeking 和 seeked ，一般浏览器触发一次， android 下uc浏览器触发多次<blockquote>
<p>解决：同上</p>
</blockquote>
</li>
<li>一些浏览器监听不到 seeking 和 seeked<blockquote>
<p>解决：在 timeupdate 里来分析猜测用户行为</p>
</blockquote>
</li>
<li>一些浏览器存在多次连续触发 seeking + seeked 的情况<blockquote>
<p>解决：时间戳 + 节流 等待最后一次</p>
</blockquote>
</li>
<li>seeking 和 seeked 与 timeupdate 需要保证不会同时执行<blockquote>
<p>解决：监听到 seeking 触发，就不再执行 timeupdate 模拟<br>走过的坑：我曾设想在播放时直接判断出是否支持 seeking ，方式是播放时设置 currentTime 为 0.01 ，然后检测 seeking 属性，后来发现浏览器在这样设置后的 seeking 属性值不一致</p>
</blockquote>
</li>
<li>个别浏览器播放状态下不触发 seeking 和 seeked ，但是在重播的时候触发<blockquote>
<p>解决：声明状态变量，随着具体操作更新状态，结束状态不监听 seeking 触发</p>
</blockquote>
</li>
</ul>
<p>提示一下，遇到浏览器表现不同的情况，千万不要尝试对各个浏览器适配 hack ，没法根本上解决问题，而我的做法是声明状态变量，随着具体操作更新状态，在正确的状态下才进行操作，通过播放状态来规范事件的触发时机</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>欲先善其事必先利其器，遇到没搞过的技术，一定要先测试一遍 api ，不然太浪费时间，学习内容来源</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/Events/Media_events" target="_blank" rel="external">媒体相关事件</a></p>
<p>希望能多提宝贵建议，帮助笔者继续优化</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了监控移动端视频播放的情况，研究了一下 html5 &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; 标签的属性与事件触发，及其在各系统和各个浏览器的兼容情况&lt;/p&gt;
    
    </summary>
    
      <category term="work" scheme="http://gaoxuefeng.com/categories/work/"/>
    
    
      <category term="html5" scheme="http://gaoxuefeng.com/tags/html5/"/>
    
  </entry>
  
  <entry>
    <title>八皇后问题的JavaScript解法</title>
    <link href="http://gaoxuefeng.com/2016/05/13/%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98%E7%9A%84JavaScript%E8%A7%A3%E6%B3%95/"/>
    <id>http://gaoxuefeng.com/2016/05/13/八皇后问题的JavaScript解法/</id>
    <published>2016-05-13T07:28:24.000Z</published>
    <updated>2016-06-13T08:00:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于八皇后问题的 JavaScript 解法，总觉得是需要学习一下算法的，哪天要用到的时候发现真不会就尴尬了</p>
<a id="more"></a>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>八皇后问题是一个以国际象棋为背景的问题：如何能够在 8×8 的国际象棋棋盘上放置八个皇后，使得任何一个皇后都无法直接吃掉其他的皇后？为了达到此目的，任两个皇后都不能处于同一条横行、纵行或斜线上</p>
<p>八皇后问题可以推广为更一般的n皇后摆放问题：这时棋盘的大小变为 n×n ，而皇后个数也变成n 。当且仅当<code>n = 1</code>或<code>n ≥ 4</code>时问题有解</p>
<h2 id="盲目的枚举算法"><a href="#盲目的枚举算法" class="headerlink" title="盲目的枚举算法"></a>盲目的枚举算法</h2><p>通过N重循环，枚举满足约束条件的解（八重循环代码好多，这里进行四重循环），找到四个皇后的所有可能位置，然后再整个棋盘里判断这四个皇后是否会直接吃掉彼此，程序思想比较简单</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">check1</span>(<span class="params">arr, n</span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</div><div class="line">            <span class="keyword">if</span>((arr[i] == arr[j]) || <span class="built_in">Math</span>.abs(arr[i] - arr[j]) == j - i) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">queen1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> arr = [];</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(arr[<span class="number">0</span>] = <span class="number">1</span>; arr[<span class="number">0</span>] &lt;= <span class="number">4</span>; arr[<span class="number">0</span>]++) &#123;</div><div class="line">        <span class="keyword">for</span>(arr[<span class="number">1</span>] = <span class="number">1</span>; arr[<span class="number">1</span>] &lt;= <span class="number">4</span>; arr[<span class="number">1</span>]++) &#123;</div><div class="line">            <span class="keyword">for</span>(arr[<span class="number">2</span>] = <span class="number">1</span>; arr[<span class="number">2</span>] &lt;= <span class="number">4</span>; arr[<span class="number">2</span>]++) &#123;</div><div class="line">                <span class="keyword">for</span>(arr[<span class="number">3</span>] = <span class="number">1</span>; arr[<span class="number">3</span>] &lt;= <span class="number">4</span>; arr[<span class="number">3</span>]++) &#123;</div><div class="line">                    <span class="keyword">if</span>(!check1(arr, <span class="number">4</span>)) &#123;</div><div class="line">                        <span class="keyword">continue</span>;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="built_in">console</span>.log(arr);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">queen1();</div><div class="line"><span class="comment">//[ 2, 4, 1, 3 ]</span></div><div class="line"><span class="comment">//[ 3, 1, 4, 2 ]</span></div></pre></td></tr></table></figure>
<p>关于结果，在 4*4 的棋盘里，四个皇后都不可能是在一排， arr[0] 到 arr[3] 分别对应四个皇后，数组的下标与下标对应的值即皇后在棋盘中的位置</p>
<h2 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h2><p>『走不通，就回头』，在适当节点判断是否符合，不符合就不再进行这条支路上的探索</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">check2</span>(<span class="params">arr, n</span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= n - <span class="number">1</span>; i++) &#123;</div><div class="line">        <span class="keyword">if</span>((<span class="built_in">Math</span>.abs(arr[i] - arr[n]) == n - i) || (arr[i] == arr[n])) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">queen2</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> arr = [];</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(arr[<span class="number">0</span>] = <span class="number">1</span>; arr[<span class="number">0</span>] &lt;= <span class="number">4</span>; arr[<span class="number">0</span>]++) &#123;</div><div class="line">        <span class="keyword">for</span>(arr[<span class="number">1</span>] = <span class="number">1</span>; arr[<span class="number">1</span>] &lt;= <span class="number">4</span>; arr[<span class="number">1</span>]++) &#123;</div><div class="line">            <span class="keyword">if</span>(!check2(arr, <span class="number">1</span>)) <span class="keyword">continue</span>; <span class="comment">//摆两个皇后产生冲突的情况</span></div><div class="line">            <span class="keyword">for</span>(arr[<span class="number">2</span>] = <span class="number">1</span>; arr[<span class="number">2</span>] &lt;= <span class="number">4</span>; arr[<span class="number">2</span>]++) &#123;</div><div class="line">                <span class="keyword">if</span>(!check2(arr, <span class="number">2</span>)) <span class="keyword">continue</span>; <span class="comment">//摆三个皇后产生冲突的情况</span></div><div class="line">                <span class="keyword">for</span>(arr[<span class="number">3</span>] = <span class="number">1</span>; arr[<span class="number">3</span>] &lt;= <span class="number">4</span>; arr[<span class="number">3</span>]++) &#123;</div><div class="line">                    <span class="keyword">if</span>(!check2(arr, <span class="number">3</span>)) &#123;</div><div class="line">                    	<span class="keyword">continue</span>;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    	<span class="built_in">console</span>.log(arr);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">queen2();</div><div class="line"><span class="comment">//[ 2, 4, 1, 3 ]</span></div><div class="line"><span class="comment">//[ 3, 1, 4, 2 ]</span></div></pre></td></tr></table></figure>
<h2 id="非递归回溯法"><a href="#非递归回溯法" class="headerlink" title="非递归回溯法"></a>非递归回溯法</h2><p>算法框架</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span>(k &gt; <span class="number">0</span> 『有路可走』 and 『未达到目标』) &#123; <span class="comment">// k &gt; 0 有路可走</span></div><div class="line">    <span class="keyword">if</span>(k &gt; n) &#123; <span class="comment">// 搜索到叶子节点</span></div><div class="line">        <span class="comment">// 搜索到一个解，输出</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//a[k]第一个可能的值</span></div><div class="line">        <span class="keyword">while</span>(『a[k]在不满足约束条件且在搜索空间内』) &#123;</div><div class="line">            <span class="comment">// a[k]下一个可能的值</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(『a[k]在搜索空间内』) &#123;</div><div class="line">            <span class="comment">// 标示占用的资源</span></div><div class="line">            <span class="comment">// k = k + 1;</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 清理所占的状态空间</span></div><div class="line">            <span class="comment">// k = k - 1;</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体代码如下，最外层while下面包含两部分，一部分是对当前皇后可能值的遍历，另一部分是决定是进入下一层还是回溯上一层</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">backdate</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> arr = [];</div><div class="line"></div><div class="line">    <span class="keyword">var</span> k = <span class="number">1</span>; <span class="comment">// 第n的皇后</span></div><div class="line">    arr[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(k &gt; <span class="number">0</span>) &#123;</div><div class="line"></div><div class="line">        arr[k<span class="number">-1</span>] = arr[k<span class="number">-1</span>] + <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>((arr[k<span class="number">-1</span>] &lt;= n) &amp;&amp; (!check2(arr, k<span class="number">-1</span>))) &#123;</div><div class="line">            arr[k<span class="number">-1</span>] = arr[k<span class="number">-1</span>] + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 这个皇后满足了约束条件，进行下一步判断</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span>(arr[k<span class="number">-1</span>] &lt;= n) &#123;</div><div class="line">            <span class="keyword">if</span>(k == n) &#123; <span class="comment">// 第n个皇后</span></div><div class="line">                <span class="built_in">console</span>.log(arr);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                k = k + <span class="number">1</span>; <span class="comment">// 下一个皇后</span></div><div class="line">                arr[k<span class="number">-1</span>] = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            k = k - <span class="number">1</span>; <span class="comment">// 回溯，上一个皇后</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">backdate(<span class="number">4</span>);</div><div class="line"><span class="comment">//[ 2, 4, 1, 3 ]</span></div><div class="line"><span class="comment">//[ 3, 1, 4, 2 ]</span></div></pre></td></tr></table></figure>
<h2 id="递归回溯法"><a href="#递归回溯法" class="headerlink" title="递归回溯法"></a>递归回溯法</h2><p>递归调用大大减少了代码量，也增加了程序的可读性</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [], n = <span class="number">4</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">backtrack</span>(<span class="params">k</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(k &gt; n) &#123;</div><div class="line">        <span class="built_in">console</span>.log(arr);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i &lt;= n; i++) &#123;</div><div class="line">            arr[k<span class="number">-1</span>] = i;</div><div class="line">            <span class="keyword">if</span>(check2(arr, k<span class="number">-1</span>)) &#123;</div><div class="line">                backtrack(k + <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">backtrack(<span class="number">1</span>);</div><div class="line"><span class="comment">//[ 2, 4, 1, 3 ]</span></div><div class="line"><span class="comment">//[ 3, 1, 4, 2 ]</span></div></pre></td></tr></table></figure>
<h2 id="华而不实的amb"><a href="#华而不实的amb" class="headerlink" title="华而不实的amb"></a>华而不实的amb</h2><p>什么是 amb ？给它一个数据列表，它能返回满足约束条件的成功情况的一种方式，没有成功情况就会失败，当然，它可以返回所有的成功情况。笔者写了上面那么多的重点，就是为了在这里推荐这个amb算法，它适合处理简单的回溯场景，很有趣，让我们来看看它是怎么工作的</p>
<p>首先来处理一个小问题，寻找相邻字符串：拿到几组字符串数组，每个数组拿出一个字符串，前一个字符串的末位字符与后一个字符串的首位字符相同，满足条件则输出这组新取出来的字符串</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">ambRun(<span class="function"><span class="keyword">function</span>(<span class="params">amb, fail</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 约束条件方法</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">linked</span>(<span class="params">s1, s2</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> s1.slice(<span class="number">-1</span>) == s2.slice(<span class="number">0</span>, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 注入数据列表</span></div><div class="line">    <span class="keyword">var</span> w1 = amb([<span class="string">"the"</span>, <span class="string">"that"</span>, <span class="string">"a"</span>]);</div><div class="line">    <span class="keyword">var</span> w2 = amb([<span class="string">"frog"</span>, <span class="string">"elephant"</span>, <span class="string">"thing"</span>]);</div><div class="line">    <span class="keyword">var</span> w3 = amb([<span class="string">"walked"</span>, <span class="string">"treaded"</span>, <span class="string">"grows"</span>]);</div><div class="line">    <span class="keyword">var</span> w4 = amb([<span class="string">"slowly"</span>, <span class="string">"quickly"</span>]);</div><div class="line"></div><div class="line">    <span class="comment">// 执行程序</span></div><div class="line">    <span class="keyword">if</span> (!(linked(w1, w2) &amp;&amp; linked(w2, w3) &amp;&amp; linked(w3, w4))) fail();</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log([w1, w2, w3, w4].join(<span class="string">' '</span>));</div><div class="line">    <span class="comment">// "that thing grows slowly"</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>看起来超级简洁有没有！不过使用的前提是，你不在乎性能，它真的是很浪费时间！</p>
<p>下面是它的 javascript 实现，有兴趣可以研究研究它是怎么把回溯抽出来的</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ambRun</span>(<span class="params">func</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> choices = [];</div><div class="line">    <span class="keyword">var</span> index;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">amb</span>(<span class="params">values</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (values.length == <span class="number">0</span>) &#123;</div><div class="line">            fail();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (index == choices.length) &#123;</div><div class="line">            choices.push(&#123;<span class="attr">i</span>: <span class="number">0</span>,</div><div class="line">                <span class="attr">count</span>: values.length&#125;);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">var</span> choice = choices[index++];</div><div class="line">        <span class="keyword">return</span> values[choice.i];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fail</span>(<span class="params"></span>) </span>&#123; <span class="keyword">throw</span> fail; &#125;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            index = <span class="number">0</span>;</div><div class="line">            <span class="keyword">return</span> func(amb, fail);</div><div class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">            <span class="keyword">if</span> (e != fail) &#123;</div><div class="line">                <span class="keyword">throw</span> e;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">var</span> choice;</div><div class="line"></div><div class="line">            <span class="keyword">while</span> ((choice = choices.pop()) &amp;&amp; ++choice.i == choice.count) &#123;&#125;</div><div class="line">            <span class="keyword">if</span> (choice == <span class="literal">undefined</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">undefined</span>;</div><div class="line">            &#125;</div><div class="line">            choices.push(choice);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以及使用 amb 实现的八皇后问题的具体代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">ambRun(<span class="function"><span class="keyword">function</span>(<span class="params">amb, fail</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> N = <span class="number">4</span>;</div><div class="line">    <span class="keyword">var</span> arr = [];</div><div class="line">    <span class="keyword">var</span> turn = [];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> n = <span class="number">0</span>; n &lt; N; n++) &#123;</div><div class="line">        turn[turn.length] = n + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(n--) &#123;</div><div class="line">        arr[arr.length] = amb(turn);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; N; ++j) &#123;</div><div class="line">            <span class="keyword">var</span> a = arr[i], b = arr[j];</div><div class="line">            <span class="keyword">if</span> (a == b || <span class="built_in">Math</span>.abs(a - b) == j - i) fail();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(arr);</div><div class="line">    fail();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="八皇后问题的JavaScript解法"><a href="#八皇后问题的JavaScript解法" class="headerlink" title="八皇后问题的JavaScript解法"></a>八皇后问题的JavaScript解法</h2><p>这是八皇后问题的JavaScript解法，整个程序都没用for循环，都是靠递归来实现的，充分运用了Array对象的map, reduce, filter, concat, slice方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="keyword">var</span> queens = <span class="function"><span class="keyword">function</span> (<span class="params">boarderSize</span>) </span>&#123;</div><div class="line">  <span class="comment">// 用递归生成一个start到end的Array</span></div><div class="line">  <span class="keyword">var</span> interval = <span class="function"><span class="keyword">function</span> (<span class="params">start, end</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (start &gt; end) &#123; <span class="keyword">return</span> []; &#125;</div><div class="line">    <span class="keyword">return</span> interval(start, end - <span class="number">1</span>).concat(end);</div><div class="line">  &#125;;</div><div class="line">  <span class="comment">// 检查一个组合是否有效</span></div><div class="line">  <span class="keyword">var</span> isValid = <span class="function"><span class="keyword">function</span> (<span class="params">queenCol</span>) </span>&#123;</div><div class="line">    <span class="comment">// 检查两个位置是否有冲突</span></div><div class="line">    <span class="keyword">var</span> isSafe = <span class="function"><span class="keyword">function</span> (<span class="params">pointA, pointB</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> slope = (pointA.row - pointB.row) / (pointA.col - pointB.col);</div><div class="line">      <span class="keyword">if</span> ((<span class="number">0</span> === slope) || (<span class="number">1</span> === slope) || (<span class="number">-1</span> === slope)) &#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</div><div class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">var</span> len = queenCol.length;</div><div class="line">    <span class="keyword">var</span> pointToCompare = &#123;</div><div class="line">      <span class="attr">row</span>: queenCol[len - <span class="number">1</span>],</div><div class="line">      <span class="attr">col</span>: len</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">// 先slice出除了最后一列的数组，然后依次测试每列的点和待测点是否有冲突，最后合并测试结果</span></div><div class="line">    <span class="keyword">return</span> queenCol</div><div class="line">      .slice(<span class="number">0</span>, len - <span class="number">1</span>)</div><div class="line">      .map(<span class="function"><span class="keyword">function</span> (<span class="params">row, index</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> isSafe(&#123;<span class="attr">row</span>: row, <span class="attr">col</span>: index + <span class="number">1</span>&#125;, pointToCompare);</div><div class="line">      &#125;)</div><div class="line">      .reduce(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> a &amp;&amp; b;</div><div class="line">      &#125;);</div><div class="line">  &#125;;</div><div class="line">  <span class="comment">// 递归地去一列一列生成符合规则的组合</span></div><div class="line">  <span class="keyword">var</span> queenCols = <span class="function"><span class="keyword">function</span> (<span class="params">size</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="number">1</span> === size) &#123;</div><div class="line">      <span class="keyword">return</span> interval(<span class="number">1</span>, boarderSize).map(<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123; <span class="keyword">return</span> [i]; &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 先把之前所有符合规则的列组成的集合再扩展一列，然后用reduce降维，最后用isValid过滤掉不符合规则的组合</span></div><div class="line">    <span class="keyword">return</span> queenCols(size - <span class="number">1</span>)</div><div class="line">      .map(<span class="function"><span class="keyword">function</span> (<span class="params">queenCol</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> interval(<span class="number">1</span>, boarderSize).map(<span class="function"><span class="keyword">function</span> (<span class="params">row</span>) </span>&#123;</div><div class="line">          <span class="keyword">return</span> queenCol.concat(row);</div><div class="line">        &#125;);</div><div class="line">      &#125;)</div><div class="line">      .reduce(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> a.concat(b);</div><div class="line">      &#125;)</div><div class="line">      .filter(isValid);</div><div class="line">  &#125;;</div><div class="line">  <span class="comment">// queens函数入口</span></div><div class="line">  <span class="keyword">return</span> queenCols(boarderSize);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(queens(<span class="number">8</span>));</div><div class="line"><span class="comment">// 输出结果:</span></div><div class="line"><span class="comment">// [ [ 1, 5, 8, 6, 3, 7, 2, 4 ],</span></div><div class="line"><span class="comment">//   [ 1, 6, 8, 3, 7, 4, 2, 5 ],</span></div><div class="line"><span class="comment">//   ...</span></div><div class="line"><span class="comment">//   [ 8, 3, 1, 6, 2, 5, 7, 4 ],</span></div><div class="line"><span class="comment">//   [ 8, 4, 1, 3, 6, 2, 7, 5 ] ]</span></div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>回溯算法是很常用的基本算法，认真掌握是没有错的，笔者也是一边学习一边写下本篇，学习内容来源</p>
<p><a href="https://zh.wikipedia.org/wiki/%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98" target="_blank" rel="external">八皇后问题</a><br><a href="http://www.cnblogs.com/steven_oyj/archive/2010/05/22/1741376.html" target="_blank" rel="external">五大常用算法之四：回溯法</a><br><a href="http://www.cnblogs.com/houkai/p/3480940.html" target="_blank" rel="external">回溯法——八皇后问题</a><br><a href="http://mihai.bazon.net/blog/amb-in-javascript" target="_blank" rel="external">Amb() in JavaScript</a><br><a href="https://yyqian.com/post/1442113857711/" target="_blank" rel="external">八皇后问题的 JavaScript 解法</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于八皇后问题的 JavaScript 解法，总觉得是需要学习一下算法的，哪天要用到的时候发现真不会就尴尬了&lt;/p&gt;
    
    </summary>
    
      <category term="think" scheme="http://gaoxuefeng.com/categories/think/"/>
    
    
      <category term="javascript" scheme="http://gaoxuefeng.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>简易瀑布流布局</title>
    <link href="http://gaoxuefeng.com/2016/05/06/%E7%AE%80%E6%98%93%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80/"/>
    <id>http://gaoxuefeng.com/2016/05/06/简易瀑布流布局/</id>
    <published>2016-05-06T15:31:20.000Z</published>
    <updated>2016-06-15T12:15:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>昨天看慕课网的视频，看到里面一节关于瀑布流布局的实现，使用的是绝对布局，显然不是最好的实现方式，于是自己实现了一下不用计算top和left值，直接用浮动布局来完成的html布局</p>
<a id="more"></a>
<p>瀑布流指的是图片或div块等宽不等高，参差无缝的排列在一起，在向下滚动滚动条到底的时候，添加新的数据到整体框里面</p>
<p><strong>主要布局</strong></p>
<p>.grid是外层，.col是每列，.box是每块，布局上很简单，每一列向左浮动，每一个块也向左浮动</p>
<p>css样式</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.gird</span> &#123;</div><div class="line">	<span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col</span> &#123;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">width</span>: <span class="number">235px</span>;</div><div class="line">	<span class="attribute">margin-left</span>: <span class="number">15px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">width</span>: <span class="number">235px</span>;</div><div class="line">	<span class="attribute">padding-top</span>: <span class="number">15px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.pic</span> &#123;</div><div class="line">	<span class="attribute">padding</span>: <span class="number">10px</span>;</div><div class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</div><div class="line">	<span class="attribute">border-radius</span>: <span class="number">5px</span>;</div><div class="line">	<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#ccc</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.image</span> &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>html样式</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"gird"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pic"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/1.jpg"</span> <span class="attr">alt</span>=<span class="string">"图片"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		...</div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span></div><div class="line">		...</div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>js动态添加数据</strong></p>
<p>动态添加数据，heightArr这个数组是用来保存每列盒子的总高度的，每次render的时候，查看每一列的heightArr是否小于body文档的高度，如果小于则添加下一张图片到imgArr[i]中，最后把imgArr[i]里面的内容拼接起来添加到对应的列中，实现了动态添加数据，正常数据是用ajax拉取的，此处暂时不考虑</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> jDoc = $(<span class="built_in">document</span>);</div><div class="line"><span class="keyword">var</span> heightArr = [];</div><div class="line"><span class="keyword">var</span> imgArr = [];</div><div class="line"><span class="keyword">var</span> count = <span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> colLen = <span class="built_in">Math</span>.floor(jDoc.width()/<span class="number">250</span>);</div><div class="line"><span class="comment">//这个数组是保存图片信息的，此处我自己写了一些测试数据</span></div><div class="line"><span class="keyword">var</span> imgs = [<span class="number">0</span>, <span class="number">248</span>, <span class="number">226</span>, <span class="number">263</span>, <span class="number">282</span>, <span class="number">206</span>, <span class="number">317</span>, <span class="number">316</span>, <span class="number">290</span>, <span class="number">331</span>, <span class="number">179</span>, <span class="number">356</span>, <span class="number">270</span>, <span class="number">250</span>, <span class="number">203</span>, <span class="number">296</span>, <span class="number">168</span>, <span class="number">328</span>, <span class="number">197</span>, <span class="number">361</span>, <span class="number">172</span>, <span class="number">269</span>, <span class="number">197</span>, <span class="number">184</span>, <span class="number">253</span>, <span class="number">238</span>, <span class="number">310</span>, <span class="number">326</span>];</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">//遍历每列</span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; colLen; i++) &#123;</div><div class="line">		heightArr[i] || (heightArr[i] = <span class="number">0</span>);</div><div class="line">		imgArr[i] = [];</div><div class="line">		<span class="keyword">while</span>(heightArr[i] &lt;= jDoc.height()) &#123;</div><div class="line">			<span class="comment">//盒子高度增长</span></div><div class="line">			heightArr[i] += imgs[count];</div><div class="line">			</div><div class="line">			imgArr[i].push(<span class="string">'&lt;div class="box"&gt;&lt;div class="pic"&gt;&lt;img class="image" src="'</span>+url +<span class="string">"fall"</span>+count+<span class="string">'.jpg"&gt;&lt;/div&gt;&lt;/div&gt;'</span>);</div><div class="line">			count++;</div><div class="line">			<span class="keyword">if</span>(count == <span class="number">28</span>) &#123;</div><div class="line">				count = <span class="number">1</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//向页面添加</span></div><div class="line">	$(<span class="string">".col"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">index</span>) </span>&#123;</div><div class="line">		$(<span class="keyword">this</span>).append(imgArr[index].join(<span class="string">""</span>));</div><div class="line">	&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>列的添加</strong></p>
<p>由于需要浏览器宽度不确定，还为了适应浏览器宽度，所以列也需要动态添加</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addCols</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> colArr = [];</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; colLen; i++) &#123;</div><div class="line">		colArr.push(<span class="string">'&lt;div class="col"&gt;&lt;/div&gt;'</span>);</div><div class="line">	&#125;</div><div class="line">	$(<span class="string">".gird"</span>).append(colArr.join(<span class="string">""</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>滑动添加数据的实现</strong></p>
<p>需要考虑的是何时需要添加数据，思路是在最下面的盒子显示在可视窗口时，添加新的数据</p>
<p>具体实现是，找到当前最下面的那个盒子的距离文档顶部的距离，这里是top，找到可视窗口底边距离文档顶部的距离，这里设为winTop，如果 top &gt; winTop 不执行，反之执行render</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">scroll</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> top = <span class="number">0</span>;</div><div class="line">	<span class="comment">//找到最下面的盒子的offsetTop</span></div><div class="line">	$(<span class="string">".image"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span>($(<span class="keyword">this</span>).offset().top &gt; top) &#123;</div><div class="line">			top = $(<span class="keyword">this</span>).offset().top;</div><div class="line">		&#125;</div><div class="line">	&#125;)</div><div class="line">	<span class="keyword">if</span>(top &gt; $(<span class="built_in">window</span>).scrollTop() + $(<span class="built_in">window</span>).height()) &#123;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	render();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>适应屏幕宽度的实现</strong></p>
<p>如果容纳列数减小了，直接移除多余的列</p>
<p>如果容纳列数增加了，首先添加列，然后再添加数据到新添加的列中</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">afresh</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span>(colLen &gt; <span class="built_in">Math</span>.floor(jDoc.width()/<span class="number">250</span>)) &#123;</div><div class="line">		colLen = <span class="built_in">Math</span>.floor(jDoc.width()/<span class="number">250</span>);</div><div class="line">		$(<span class="string">".col"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">index</span>) </span>&#123;</div><div class="line">			<span class="keyword">if</span>(index &gt;= colLen) &#123;</div><div class="line">				$(<span class="keyword">this</span>).remove();</div><div class="line">				heightArr[index] = <span class="number">0</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span>(colLen &lt; <span class="built_in">Math</span>.floor(jDoc.width()/<span class="number">250</span>)) &#123;</div><div class="line">		colLen = <span class="built_in">Math</span>.floor(jDoc.width()/<span class="number">250</span>) - colLen;</div><div class="line">		addCols();</div><div class="line">		</div><div class="line">		colLen = <span class="built_in">Math</span>.floor(jDoc.width()/<span class="number">250</span>);</div><div class="line">		render();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>函数节流</strong></p>
<p>在浏览器DOM操作是的昂贵的，而onscroll和onresize是会让事件连续触发的，所以需要对其控制，避免重复执行</p>
<p>解决的方式是使用定时器，throttle接收两个参数：要执行的函数以及在哪个作用域执行。第一次调用创建一个定时器，在指定时间之后运行代码，当第二次调用时，会清除前一次的定时器并设置另一个。如果前一个定时器未执行，其实就是将其替代为另一个新的定时器。目的是只有在执行函数的请求停止了一段时间之后才执行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">method, context</span>) </span>&#123;</div><div class="line">	clearTimeout(method.tId);</div><div class="line">	method.tId = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		method.call(context);</div><div class="line">	&#125;, <span class="number">100</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>总结</strong></p>
<p>花了点力气做这个瀑布流，对之前的知识有了点新的认识，到没遇到特别难的问题，只是明白了解决问题的思路是可以使用一些好的设计实现的，比如说我面对滚动条向上滑执行onscroll事件这问题时，首先想到的是鼠标滚轮事件，后来想想太不合情理了，发现滚动条件这个才是合情合理的，果然思路很重要</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天看慕课网的视频，看到里面一节关于瀑布流布局的实现，使用的是绝对布局，显然不是最好的实现方式，于是自己实现了一下不用计算top和left值，直接用浮动布局来完成的html布局&lt;/p&gt;
    
    </summary>
    
      <category term="test" scheme="http://gaoxuefeng.com/categories/test/"/>
    
    
      <category term="javascript" scheme="http://gaoxuefeng.com/tags/javascript/"/>
    
      <category term="css" scheme="http://gaoxuefeng.com/tags/css/"/>
    
      <category term="html" scheme="http://gaoxuefeng.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>jquery插件开发相关</title>
    <link href="http://gaoxuefeng.com/2016/05/06/jquery%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/"/>
    <id>http://gaoxuefeng.com/2016/05/06/jquery插件开发相关/</id>
    <published>2016-05-06T15:25:40.000Z</published>
    <updated>2016-06-15T12:15:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>打算把我之前写的一个轮播组件封装成jquery插件，一边学一边改，这个轮播组件的设计思路是把图片拼成一排，然后修改整排的left属性，在配上js的animate方法，实现轮播滑动</p>
<a id="more"></a>
<p>这个组件的结构是这样的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Carousel</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">Carousel.prototype.afreash = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">Carousel.prototype.listener = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">...</div></pre></td></tr></table></figure>
<p>主要讲下我修改其为jquery插件，具体都改了哪些地方。</p>
<p><strong>把全部代码放在闭包里</strong></p>
<p>此时闭包相当于一个私有作用域，外部无法访问到内部的信息，并且不会存在全局变量的污染。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</div><div class="line">	<span class="comment">//在局部作用域中用$引用jQuery</span></div><div class="line">	<span class="comment">//...</span></div><div class="line">&#125;)(jQuery);</div></pre></td></tr></table></figure>
<p><strong>添加 Carousel.DEFAULTS = {} 来保存默认参数</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Carousel.DEFAULTS = &#123;</div><div class="line">	<span class="attr">interval</span>: <span class="number">5000</span>,</div><div class="line">	<span class="attr">limit</span>: <span class="number">0.2</span>,</div><div class="line">	<span class="attr">mouse</span>: <span class="number">50</span>,</div><div class="line">	<span class="attr">toler</span>: <span class="number">0</span>,</div><div class="line">	<span class="attr">speed</span>: <span class="number">500</span>,</div><div class="line">	<span class="attr">up</span>: <span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>添加Plugin方法</strong></p>
<p>这个Plugin方法是在bootstrap里面看到的，直接拿来用了。<br>$.extend(target, [object1], [objectN]) 这个方法主要用来合并两个或更多个对象的内容到第一个对象。<br>值得注意的是：多个对象合并时，会破坏第一个对象的结构，所以可传递一个空对象作为第一个参数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Plugin</span>(<span class="params">option</span>) </span>&#123;</div><div class="line">	<span class="comment">//返回遍历结果是为了保存jquery的链式调用</span></div><div class="line">	</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> $<span class="keyword">this</span>   = $(<span class="keyword">this</span>);</div><div class="line">	    <span class="keyword">var</span> data    = $<span class="keyword">this</span>.data(<span class="string">'xf.carousel'</span>);</div><div class="line">	    <span class="comment">//将默认参数和新修改的参数绑到一起</span></div><div class="line">	    <span class="keyword">var</span> options = $.extend(&#123;&#125;, Carousel.DEFAULTS, $<span class="keyword">this</span>.data(), <span class="keyword">typeof</span> option == <span class="string">'object'</span> &amp;&amp; option);</div><div class="line">	    <span class="comment">//方法名</span></div><div class="line">	    <span class="keyword">var</span> action  = <span class="keyword">typeof</span> option == <span class="string">'string'</span> ? option : <span class="literal">false</span>;</div><div class="line">	    </div><div class="line">	    <span class="keyword">if</span>(!data) &#123;</div><div class="line">	    	<span class="comment">//持久化数据</span></div><div class="line">	    	$<span class="keyword">this</span>.data(<span class="string">'xf.carousel'</span>, (data = <span class="keyword">new</span> Carousel(<span class="keyword">this</span>, options)));</div><div class="line">	    	data.init();</div><div class="line">	    &#125;</div><div class="line">	    </div><div class="line">	    <span class="keyword">if</span>(<span class="keyword">typeof</span> option == <span class="string">'number'</span>) &#123;</div><div class="line">	    	data.go(option);</div><div class="line">	    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(action) &#123;</div><div class="line">	</div><div class="line">	    	data[action]();</div><div class="line">	    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(options.interval) &#123;</div><div class="line">	    	data.options = options;</div><div class="line">	    	data.afresh();</div><div class="line">	    	data.alarm();</div><div class="line">	    &#125;</div><div class="line">	&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>把Plugin绑定到jquery原型上，也就是$.fn上</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$.fn.carousel = Plugin;</div><div class="line">$.fn.carousel.Constructor = Carousel;</div></pre></td></tr></table></figure>
<p><strong>使用$.proxy</strong></p>
<p>在处理内部代码的时候，遇到在setTimeout和setInterval里面执行方法，如何引入正确this的情况<br>使用$.proxy可以非常干净的实现，$.proxy本身依靠得还是apply</p>
<p>感兴趣的看官点击这里 <a href="http://github.com/ggsoul/carousel" target="_blank" rel="external">github:carousel</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;打算把我之前写的一个轮播组件封装成jquery插件，一边学一边改，这个轮播组件的设计思路是把图片拼成一排，然后修改整排的left属性，在配上js的animate方法，实现轮播滑动&lt;/p&gt;
    
    </summary>
    
      <category term="work" scheme="http://gaoxuefeng.com/categories/work/"/>
    
    
      <category term="javascript" scheme="http://gaoxuefeng.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>H5扇形</title>
    <link href="http://gaoxuefeng.com/2016/05/06/H5%E6%89%87%E5%BD%A2/"/>
    <id>http://gaoxuefeng.com/2016/05/06/H5扇形/</id>
    <published>2016-05-06T15:18:52.000Z</published>
    <updated>2016-06-15T12:15:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用H5 canvas绘制的可交互扇形</p>
<a id="more"></a>
<h2 id="requestAnimationFrame"><a href="#requestAnimationFrame" class="headerlink" title="requestAnimationFrame()"></a>requestAnimationFrame()</h2><p><strong>现有动画实现方式的不足</strong></p>
<p><code>setTimeout</code>和<code>setInterval</code>都不十分精确。为它们传入的第二个参数，实际上只是指定了把动画代码添加到浏览器UI线程队列中以等待执行的时间。如果队列前面已经加入了其他任务，那动画代码就要等前面的任务完成后再执行。</p>
<p>css3动画有局限性，比如不是所有属性都能参与动画、动画缓动效果太少、无法完全控制动画过程等。</p>
<p><strong>requestAnimationFrame()的优势</strong></p>
<p>它告诉浏览器某些JavaScript代码将要执行动画，浏览器可以再运行某些代码后进行适当的优化，十分精确，没有css3的局限问题，可对所有属性操作，动画缓动效果可以依据缓动公式，十分丰富。</p>
<p><code>requestAnimationFrame()</code>就是为了绘制canvas而生，再合适不过了。</p>
<p><strong>代码实现</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> requestAnimationFrame = <span class="built_in">window</span>.requestAnimationFrame ||</div><div class="line">						<span class="built_in">window</span>.webkitRequestAnimationFrame ||</div><div class="line">						<span class="built_in">window</span>.mozRequestAnimationFrame ||</div><div class="line">						<span class="built_in">window</span>.oRequestAnimationFrame ||</div><div class="line">						<span class="built_in">window</span>.msRequestAnimationFrame;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateProgress</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"status"</span>);</div><div class="line">	div.style.width = (<span class="built_in">parseInt</span>(div.style.width, <span class="number">10</span>) + <span class="number">5</span>) + <span class="string">"%"</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(div.style.left != <span class="string">"100%"</span>) &#123;</div><div class="line">		requestAnimationFrame(uploadProgress);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">requestAnimationFrame(uploadProgress);</div></pre></td></tr></table></figure>
<p>这里展示高级浏览器版本，兼容版请自行google。</p>
<p><img src="http://7xir4w.com1.z0.glb.clouddn.com/blog/images/caniuse1.png" alt="caniuse1"></p>
<h2 id="easing缓冲动画"><a href="#easing缓冲动画" class="headerlink" title="easing缓冲动画"></a>easing缓冲动画</h2><p>当初学习的时候的文章找不到了，大致的理解是：时间间隔一直，每个间隔运行的距离不同。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//iteration当前执行次数</span></div><div class="line"><span class="comment">//startValue执行开始的位置</span></div><div class="line"><span class="comment">//changeValue需要执行到的最终位置</span></div><div class="line"><span class="comment">//totalIterations需要执行的总次数</span></div><div class="line"></div><div class="line">easing.easeOutBounce(iteration, startValue, changeValue, totalIterations);</div></pre></td></tr></table></figure>
<p>看上面的参数能了解到，easing产生的是与直线的偏移，iteration表示的是偏移的延续，totalIterations表示的动画进行速度，startValue表示的是偏移的起始，changeValue表示的是偏移的量。</p>
<hr>
<h2 id="canvas方法"><a href="#canvas方法" class="headerlink" title="canvas方法"></a>canvas方法</h2><p>用到的一些canvas方法：</p>
<ul>
<li>fillRect()：在画布上绘制的矩形会填充指定颜色，由fillStyle属性指定</li>
<li>strokeRect()：在画布上绘制的矩形会使用指定的颜色描边，由strokeStyle属性指定</li>
<li>clearRect()：清除画布上的矩形区域</li>
<li>arc(x, y, radius, startAngle, endAngle, counterclockwise)：以(x, y)为圆心绘制一条弧线，弧线半径为radius，起始和结束角度(用弧度表示)分别为startAngle和endAngle。最后一个参数表示是否按逆时针方向计算，值为false表示顺时针方向计算</li>
<li>lineTo(x, y)：从上一点开始绘制一条直线，到(x, y)为止</li>
<li>drawImage(image, x, y, width, height)：绘制图像到画布上，参数有3种，不一一介绍</li>
<li>save()与restore()：保存上下文环境，操作…，恢复上次保存的上下文环境</li>
</ul>
<p>这里只用到了这些，其他方法以后再介绍</p>
<hr>
<h2 id="css3-3D-Transform"><a href="#css3-3D-Transform" class="headerlink" title="css3 3D Transform"></a>css3 3D Transform</h2><p>为了能更酷炫点，再加上css3的3D翻转效果</p>
<ul>
<li>transform-style：指定嵌套元素如何在3D空间中呈现。它主要有两个属性值：flat和preserve-3d，它本身需要设置在父元素中，如果设置了transform-style值为preserve-3d，就不能设置overflow值为hidden</li>
<li>perspective：设置查看者的位置，并将可视内容映射到一个视锥上，继而投到一个2D视平面上，就是视距</li>
<li>perspective-origin：决定perspective属性的源点角度</li>
<li>transition：过渡效果</li>
<li>translateZ()：使一个元素在三维空间移动</li>
<li>rotateY()：指定一个元素围绕Y轴旋转，旋转的量被定义为指定的角度；如果值为正值，元素围绕Y轴顺时针旋转；反之，如果值为负值，元素围绕Y轴逆时针旋转</li>
</ul>
<p>这里只用到了这些，不做详细介绍，太多了…</p>
<p>准备工作先进行到这里，接下来进行本例的讲解。</p>
<hr>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p><strong>参数数组</strong></p>
<ul>
<li>value：所占比重，百分之几</li>
<li>color：选中时颜色</li>
<li>highlight：选中时鼠标悬停时颜色</li>
<li>grey：未选中时颜色</li>
<li>greylight：未选中时鼠标悬停时颜色</li>
</ul>
<p>我自己设置传入的参数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> pieData = [</div><div class="line">	&#123;</div><div class="line">		<span class="attr">value</span>: <span class="number">0.32</span>,</div><div class="line">		<span class="attr">color</span>:<span class="string">"#E8264b"</span>,</div><div class="line">		<span class="attr">highlight</span>: <span class="string">"#FF0049"</span>,</div><div class="line">		<span class="attr">grey</span>: <span class="string">"#5B5B5B"</span>,</div><div class="line">		<span class="attr">greylight</span>: <span class="string">"#333"</span></div><div class="line">	&#125;,</div><div class="line">	&#123;</div><div class="line">		<span class="attr">value</span>: <span class="number">0.13</span>,</div><div class="line">		<span class="attr">color</span>: <span class="string">"#E64261"</span>,</div><div class="line">		<span class="attr">highlight</span>: <span class="string">"#FF5A5E"</span>,</div><div class="line">		<span class="attr">grey</span>: <span class="string">"#666"</span>,</div><div class="line">		<span class="attr">greylight</span>: <span class="string">"#333"</span></div><div class="line">	&#125;,</div><div class="line">	&#123;</div><div class="line">		<span class="attr">value</span>: <span class="number">0.13</span>,</div><div class="line">		<span class="attr">color</span>: <span class="string">"#E05070"</span>,</div><div class="line">		<span class="attr">highlight</span>: <span class="string">"#FF5A5E"</span>,</div><div class="line">		<span class="attr">grey</span>: <span class="string">"#727272"</span>,</div><div class="line">		<span class="attr">greylight</span>: <span class="string">"#444"</span></div><div class="line">	&#125;,</div><div class="line">	&#123;</div><div class="line">		<span class="attr">value</span>: <span class="number">0.1</span>,</div><div class="line">		<span class="attr">color</span>: <span class="string">"#E05D7D"</span>,</div><div class="line">		<span class="attr">highlight</span>: <span class="string">"#FF5A5E"</span>,</div><div class="line">		<span class="attr">grey</span>: <span class="string">"#7F7F7F"</span>,</div><div class="line">		<span class="attr">greylight</span>: <span class="string">"#444"</span></div><div class="line">	&#125;,</div><div class="line">	&#123;</div><div class="line">		<span class="attr">value</span>: <span class="number">0.09</span>,</div><div class="line">		<span class="attr">color</span>: <span class="string">"#DB7691"</span>,</div><div class="line">		<span class="attr">highlight</span>: <span class="string">"#FF5A5E"</span>,</div><div class="line">		<span class="attr">grey</span>: <span class="string">"#8E8E8E"</span>,</div><div class="line">		<span class="attr">greylight</span>: <span class="string">"#666"</span></div><div class="line">	&#125;,</div><div class="line">	&#123;</div><div class="line">		<span class="attr">value</span>: <span class="number">0.09</span>,</div><div class="line">		<span class="attr">color</span>: <span class="string">"#D6829C"</span>,</div><div class="line">		<span class="attr">highlight</span>: <span class="string">"#FF5A5E"</span>,</div><div class="line">		<span class="attr">grey</span>: <span class="string">"#999"</span>,</div><div class="line">		<span class="attr">greylight</span>: <span class="string">"#666"</span></div><div class="line">	&#125;,</div><div class="line">	&#123;</div><div class="line">		<span class="attr">value</span>: <span class="number">0.07</span>,</div><div class="line">		<span class="attr">color</span>: <span class="string">"#D497AA"</span>,</div><div class="line">		<span class="attr">highlight</span>: <span class="string">"#FF5A5E"</span>,</div><div class="line">		<span class="attr">grey</span>: <span class="string">"#A5A5A5"</span>,</div><div class="line">		<span class="attr">greylight</span>: <span class="string">"#666"</span></div><div class="line">	&#125;,</div><div class="line">	&#123;</div><div class="line">		<span class="attr">value</span>: <span class="number">0.07</span>,</div><div class="line">		<span class="attr">color</span>: <span class="string">"#D497AA"</span>,</div><div class="line">		<span class="attr">highlight</span>: <span class="string">"#FF5A5E"</span>,</div><div class="line">		<span class="attr">grey</span>: <span class="string">"#A5A5A5"</span>,</div><div class="line">		<span class="attr">greylight</span>: <span class="string">"#666"</span></div><div class="line">	&#125;</div><div class="line">];</div></pre></td></tr></table></figure>
<p><strong>绘制圆盘</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawing</span> (<span class="params">ctx, i</span>) </span>&#123;<span class="comment">//传入canvas的context</span></div><div class="line"></div><div class="line">    startValue = endValue;<span class="comment">//每个扇形开始绘制的位置</span></div><div class="line"></div><div class="line">	endValue = startValue + <span class="built_in">Math</span>.PI * pieData[i].value * <span class="number">2</span>;<span class="comment">//每个扇形结束绘制的位置</span></div><div class="line"></div><div class="line">	ctx.beginPath();<span class="comment">//开始绘制</span></div><div class="line">	</div><div class="line">	ctx.arc(<span class="number">225</span>, <span class="number">225</span>, radiusBig, startValue, endValue, <span class="literal">false</span>);<span class="comment">//绘制扇形的弧线</span></div><div class="line">	</div><div class="line">	ctx.lineTo(<span class="number">225</span>,<span class="number">225</span>);<span class="comment">//绘制扇形链接圆心的两条直线</span></div><div class="line">	</div><div class="line">	ctx.lineWidth = <span class="number">2</span>;<span class="comment">//设置线的宽度</span></div><div class="line">	</div><div class="line">	ctx.closePath();<span class="comment">//结束绘制</span></div><div class="line">	</div><div class="line">	ctx.fillStyle = pieData[i].grey;<span class="comment">//设置扇形颜色</span></div><div class="line">	</div><div class="line">	ctx.strokeStyle = <span class="string">"#fff"</span>;<span class="comment">//设置线的颜色</span></div><div class="line">	</div><div class="line">	ctx.fill();<span class="comment">//填充</span></div><div class="line">	</div><div class="line">	ctx.stroke();<span class="comment">//描边</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>绘制文字及其位置</strong></p>
<p>putIcon()用来计算绘制位置，r为半径，&theta;为角度，x = r + r <em> sin&theta;， y = r - r </em> cos&theta;，left和top的值为x和y。</p>
<p>(先写在这，本人不会画图，等学会再来画)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawThing</span>(<span class="params">ctx</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line">	<span class="keyword">var</span> icon = <span class="literal">undefined</span>;</div><div class="line"></div><div class="line">	<span class="keyword">for</span>( ; i &lt; pieLen ; i++ ) &#123;</div><div class="line">		drawing(ctx, i);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt; pieLen ; i++ ) &#123;</div><div class="line">		<span class="keyword">if</span>( !effects[i].clicked ) &#123;</div><div class="line">			icon = putIcon(i, <span class="number">225</span>, <span class="number">140</span>);</div><div class="line">			ctx.font = <span class="string">"bold 30px Arial"</span>;</div><div class="line">			ctx.textAlign = <span class="string">"center"</span>;</div><div class="line">			ctx.fillStyle = <span class="string">"#fff"</span>;</div><div class="line">			ctx.fillText(i + <span class="number">1</span>, icon.x, icon.y);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">putIcon</span>(<span class="params">count, radiusW, radiusN</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> values = </div><div class="line">		angle = </div><div class="line">		i = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="keyword">for</span>( ; i &lt; count; i++) &#123;</div><div class="line">		values += pieData[i].value;</div><div class="line">	&#125;</div><div class="line">	angle = <span class="built_in">Math</span>.PI * <span class="number">2</span> * (values + pieData[count].value / <span class="number">2</span>);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		<span class="attr">x</span>: <span class="built_in">Math</span>.floor(radiusW + <span class="built_in">Math</span>.sin(angle) * radiusN),</div><div class="line">		<span class="attr">y</span>: <span class="built_in">Math</span>.floor(radiusW - <span class="built_in">Math</span>.cos(angle) * radiusN)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>确定交互区域</strong></p>
<p>确定交互区域本人的思路是获取鼠标在视口上的(x ,y)，再将这个点是否是可交互区域，能耗可能会比较大，没想到更好的做法，不过看到css3的clip-path属性可以实现类似效果，之后会研究下。</p>
<p>首先确定点击区域为外层大圆与内层小圆之间，公式：(x - r) <em> (x - r) + (y - r) </em> (y - r) = r * r;</p>
<p>直线方程：(x - x1)/(x2 - x1) = (y - y1)/(y2 - y1);</p>
<p>两点即可判断一条直线，先确定圆心点(r, r)，再根据角度确定直线与圆交点(r + r <em> sin&theta;, y = r - r </em> cos&theta;)</p>
<p>得到的直线方程为：y = (x - r) <em> (-r </em> cos&theta;) / (r * sin&theta;) + r;</p>
<p>相邻两条直线建立二元一次不等式组，即可确定中间区域；</p>
<p><img src="http://7xir4w.com1.z0.glb.clouddn.com/blog/images/circle3.png" alt="circle3"></p>
<p><strong>动画缓动</strong></p>
<p>将easing与requestAnimationFrame()的结合使用，这是实现掉落效果的动画</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">clickThing</span> (<span class="params">ctx, i</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> iteration = <span class="number">0</span>;</div><div class="line">	<span class="keyword">var</span> totalIterations = <span class="number">30</span>;</div><div class="line">	<span class="keyword">var</span> backX, backY;</div><div class="line">	<span class="keyword">var</span> icon = putIcon(i, <span class="number">225</span>, <span class="number">140</span>, <span class="literal">true</span>);</div><div class="line">	<span class="keyword">var</span> ty = icon.y - <span class="number">25</span>;</div><div class="line">	<span class="comment">//立即执行的递归方法</span></div><div class="line">	(<span class="function"><span class="keyword">function</span> <span class="title">miniIcon</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">500</span>, <span class="number">500</span>);</div><div class="line">		backY = easing.easeOutBounce(iteration, ty, <span class="number">25</span>, totalIterations);</div><div class="line">		ctx.font = <span class="string">"bold 30px Arial"</span>;</div><div class="line">		ctx.textAlign = <span class="string">"center"</span>;</div><div class="line">		ctx.fillStyle = <span class="string">"#fff"</span>;</div><div class="line">		ctx.fillText(i + <span class="number">1</span>, icon.x, backY);</div><div class="line">		<span class="keyword">if</span>(iteration &lt; totalIterations) &#123;</div><div class="line">			iteration++;</div><div class="line">			requestAnimationFrame(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">				miniIcon();</div><div class="line">			&#125;);</div><div class="line">		&#125;</div><div class="line">	&#125;)();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>使用css3实现3D翻转效果</strong></p>
<p>最外层设置视距perspective: 2000px;perspective-origin:right top;<br>父级设置transition: all 0.7s ease-out;transform-style: preserve-3d;子级设置left和top为自身高宽的一半，使圆心位置为翻转中心点,back-c为背面，front-c为正面，改变rotatey(0deg)为rotatey(-180deg)表示从正面翻转180度到背面，反之亦然，translateZ()在这里用来表示层叠关系，一层盖在另一层上面。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.wrap</span> &#123;</div><div class="line">	<span class="attribute">perspective</span>: <span class="number">2000px</span>;</div><div class="line">	<span class="attribute">perspective-origin</span>:right top;</div><div class="line">	<span class="attribute">position</span>: relative;</div><div class="line">	<span class="attribute">width</span>: <span class="number">450px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">450px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.wrap</span> <span class="selector-class">.wrap-box</span> &#123;</div><div class="line">	<span class="attribute">transition</span>: all <span class="number">0.7s</span> ease-out;</div><div class="line">	<span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">	<span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#back-c</span> &#123;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">top</span>: -<span class="number">225px</span>;</div><div class="line">	<span class="attribute">left</span>: -<span class="number">225px</span>;</div><div class="line">	<span class="attribute">transform</span>: <span class="built_in">translateZ</span>(1px) <span class="built_in">rotatey</span>(0deg);</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#white-c</span> &#123;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">top</span>: -<span class="number">225px</span>;</div><div class="line">	<span class="attribute">left</span>: -<span class="number">225px</span>;</div><div class="line">	<span class="attribute">transform</span>: <span class="built_in">translateZ</span>(-2px) <span class="built_in">rotatey</span>(0deg);</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#front-c</span> &#123;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">top</span>: -<span class="number">225px</span>;</div><div class="line">	<span class="attribute">left</span>: -<span class="number">225px</span>;</div><div class="line">	<span class="attribute">transform</span>: <span class="built_in">translateZ</span>(-1px) <span class="built_in">rotatey</span>(-180deg);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>html内容</strong></p>
<p>写了很多canvas，white-c是翻转之后盖在上面的白色小圆，每次绘制都要画一次，所以拿出来减少能耗，text-c也是出于这个原因，text-c用来绘制小动画，line-c是拿出来当触发器用的，没必要单拎出来，只是想区分用途才拿出来的。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap-box"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"back-c"</span> <span class="attr">height</span>=<span class="string">"450"</span> <span class="attr">width</span>=<span class="string">"450"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"front-c"</span> <span class="attr">height</span>=<span class="string">"450"</span> <span class="attr">width</span>=<span class="string">"450"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"white-c"</span> <span class="attr">height</span>=<span class="string">"450"</span> <span class="attr">width</span>=<span class="string">"450"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"text-c"</span> <span class="attr">height</span>=<span class="string">"450"</span> <span class="attr">width</span>=<span class="string">"450"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"line-c"</span> <span class="attr">height</span>=<span class="string">"450"</span> <span class="attr">width</span>=<span class="string">"450"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>花了点时间看了下自己的代码，找寻下迷失的自己，继续启程。</p>
<hr>
<p>感兴趣的看官点击这里 <a href="http://pro-circle-35a04.coding.io/" target="_blank" rel="external">coding:circle</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用H5 canvas绘制的可交互扇形&lt;/p&gt;
    
    </summary>
    
      <category term="create" scheme="http://gaoxuefeng.com/categories/create/"/>
    
    
      <category term="html5" scheme="http://gaoxuefeng.com/tags/html5/"/>
    
      <category term="javascript" scheme="http://gaoxuefeng.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>messengerjs iframe 跨域传数据</title>
    <link href="http://gaoxuefeng.com/2016/05/06/messengerjs%20iframe%20%E8%B7%A8%E5%9F%9F%E4%BC%A0%E6%95%B0%E6%8D%AE/"/>
    <id>http://gaoxuefeng.com/2016/05/06/messengerjs iframe 跨域传数据/</id>
    <published>2016-05-06T15:08:28.000Z</published>
    <updated>2016-06-15T12:14:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>刚来公司时做得第一个项目是跨部门合作，使用了MessengerJS来做通信，十分简单，MessengerJS代码不长，这里分析一下iframe间通信的实现方式<br><a id="more"></a></p>
<p>源码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> *     __  ___</div><div class="line"> *    /  |/  /___   _____ _____ ___   ____   ____ _ ___   _____</div><div class="line"> *   / /|_/ // _ \ / ___// ___// _ \ / __ \ / __ `// _ \ / ___/</div><div class="line"> *  / /  / //  __/(__  )(__  )/  __// / / // /_/ //  __// /</div><div class="line"> * /_/  /_/ \___//____//____/ \___//_/ /_/ \__, / \___//_/</div><div class="line"> *                                        /____/</div><div class="line"> *</div><div class="line"> * @description MessengerJS, a common cross-document communicate solution.</div><div class="line"> * @author biqing kwok</div><div class="line"> * @version 2.0</div><div class="line"> * @license release under MIT license</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="built_in">window</span>.Messenger = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 消息前缀, 建议使用自己的项目名, 避免多项目之间的冲突</span></div><div class="line">    <span class="comment">// !注意 消息前缀应使用字符串类型</span></div><div class="line">    <span class="keyword">var</span> prefix = <span class="string">"[PROJECT_NAME]"</span>,</div><div class="line">        supportPostMessage = <span class="string">'postMessage'</span> <span class="keyword">in</span> <span class="built_in">window</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Target 类, 消息对象</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Target</span>(<span class="params">target, name, prefix</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> errMsg = <span class="string">''</span>;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">arguments</span>.length &lt; <span class="number">2</span>)&#123;</div><div class="line">            errMsg = <span class="string">'target error - target and name are both required'</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> target != <span class="string">'object'</span>)&#123;</div><div class="line">            errMsg = <span class="string">'target error - target itself must be window object'</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> name != <span class="string">'string'</span>)&#123;</div><div class="line">            errMsg = <span class="string">'target error - target name must be string type'</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(errMsg)&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(errMsg);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.target = target;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.prefix = prefix;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 往 target 发送消息, 出于安全考虑, 发送消息会带上前缀</span></div><div class="line">    <span class="keyword">if</span> ( supportPostMessage )&#123;</div><div class="line">        <span class="comment">// IE8+ 以及现代浏览器支持</span></div><div class="line">        Target.prototype.send = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</div><div class="line">            <span class="keyword">this</span>.target.postMessage(<span class="keyword">this</span>.prefix + <span class="string">'|'</span> + <span class="keyword">this</span>.name + <span class="string">'__Messenger__'</span> + msg, <span class="string">'*'</span>);</div><div class="line">        &#125;;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 兼容IE 6/7</span></div><div class="line">        Target.prototype.send = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> targetFunc = <span class="built_in">window</span>.navigator[<span class="keyword">this</span>.prefix + <span class="keyword">this</span>.name];</div><div class="line">            <span class="keyword">if</span> ( <span class="keyword">typeof</span> targetFunc == <span class="string">'function'</span> ) &#123;</div><div class="line">                targetFunc(<span class="keyword">this</span>.prefix + msg, <span class="built_in">window</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"target callback function is not defined"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 信使类</span></div><div class="line">    <span class="comment">// 创建Messenger实例时指定, 必须指定Messenger的名字, (可选)指定项目名, 以避免Mashup类应用中的冲突</span></div><div class="line">    <span class="comment">// !注意: 父子页面中projectName必须保持一致, 否则无法匹配</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Messenger</span>(<span class="params">messengerName, projectName</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.targets = &#123;&#125;;</div><div class="line">        <span class="keyword">this</span>.name = messengerName;</div><div class="line">        <span class="keyword">this</span>.listenFunc = [];</div><div class="line">        <span class="keyword">this</span>.prefix = projectName || prefix;</div><div class="line">        <span class="keyword">this</span>.initListen();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 添加一个消息对象</span></div><div class="line">    Messenger.prototype.addTarget = <span class="function"><span class="keyword">function</span>(<span class="params">target, name</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> targetObj = <span class="keyword">new</span> Target(target, name,  <span class="keyword">this</span>.prefix);</div><div class="line">        <span class="keyword">this</span>.targets[name] = targetObj;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// 初始化消息监听</span></div><div class="line">    Messenger.prototype.initListen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">var</span> generalCallback = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">typeof</span> msg == <span class="string">'object'</span> &amp;&amp; msg.data)&#123;</div><div class="line">                msg = msg.data;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">var</span> msgPairs = msg.split(<span class="string">'__Messenger__'</span>);</div><div class="line">            <span class="keyword">var</span> msg = msgPairs[<span class="number">1</span>];</div><div class="line">            <span class="keyword">var</span> pairs = msgPairs[<span class="number">0</span>].split(<span class="string">'|'</span>);</div><div class="line">            <span class="keyword">var</span> prefix = pairs[<span class="number">0</span>];</div><div class="line">            <span class="keyword">var</span> name = pairs[<span class="number">1</span>];</div><div class="line"></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; self.listenFunc.length; i++)&#123;</div><div class="line">                <span class="keyword">if</span> (prefix + name === self.prefix + self.name) &#123;</div><div class="line">                    self.listenFunc[i](msg);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> ( supportPostMessage )&#123;</div><div class="line">            <span class="keyword">if</span> ( <span class="string">'addEventListener'</span> <span class="keyword">in</span> <span class="built_in">document</span> ) &#123;</div><div class="line">                <span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, generalCallback, <span class="literal">false</span>);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="string">'attachEvent'</span> <span class="keyword">in</span> <span class="built_in">document</span> ) &#123;</div><div class="line">                <span class="built_in">window</span>.attachEvent(<span class="string">'onmessage'</span>, generalCallback);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 兼容IE 6/7</span></div><div class="line">            <span class="built_in">window</span>.navigator[<span class="keyword">this</span>.prefix + <span class="keyword">this</span>.name] = generalCallback;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// 监听消息</span></div><div class="line">    Messenger.prototype.listen = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">var</span> len = <span class="keyword">this</span>.listenFunc.length;</div><div class="line">        <span class="keyword">var</span> cbIsExist = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">for</span> (; i &lt; len; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.listenFunc[i] == callback) &#123;</div><div class="line">                cbIsExist = <span class="literal">true</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!cbIsExist) &#123;</div><div class="line">            <span class="keyword">this</span>.listenFunc.push(callback);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">// 注销监听</span></div><div class="line">    Messenger.prototype.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.listenFunc = [];</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">// 广播消息</span></div><div class="line">    Messenger.prototype.send = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> targets = <span class="keyword">this</span>.targets,</div><div class="line">            target;</div><div class="line">        <span class="keyword">for</span>(target <span class="keyword">in</span> targets)&#123;</div><div class="line">            <span class="keyword">if</span>(targets.hasOwnProperty(target))&#123;</div><div class="line">                targets[target].send(msg);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> Messenger;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p><strong>下面主要分析代码结构</strong></p>
<h2 id="supportPostMessage变量"><a href="#supportPostMessage变量" class="headerlink" title="supportPostMessage变量"></a>supportPostMessage变量</h2><p>用来检测当前浏览器是否支持postMessage</p>
<p>postMessage是HTML5引入的通信API，它可以避开同源策略的限制，实现安全的跨域通信</p>
<p>向外界窗口发送消息</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">otherWindow.postMessage(message, targetOrigin);</div></pre></td></tr></table></figure>
<ul>
<li>otherWindow:  指目标窗口，也就是给哪个window发消息，是 window.frames 属性的成员或者由 window.open 方法创建的窗口</li>
<li>message:  是要发送的消息，类型为 String、Object (IE8、9 不支持)，一般使用json数据</li>
<li>targetOrigin:  是限定消息接收范围，协议+主机+端口号[+URL]，URL会被忽略，所以可以不写，不限制请使用 ‘*’</li>
</ul>
<p>接受信息的message事件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> data = event.data;</div><div class="line">    <span class="keyword">var</span> origin = event.origin;</div><div class="line">    <span class="comment">//do someing</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span>.addEventListener != <span class="string">'undefined'</span>) &#123;</div><div class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, onmessage, <span class="literal">false</span>);</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span>.attachEvent != <span class="string">'undefined'</span>) &#123;</div><div class="line">    <span class="comment">//for ie</span></div><div class="line">    <span class="built_in">window</span>.attachEvent(<span class="string">'onmessage'</span>, onmessage);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：ie6/7不支持postMessage，因此在ie6/7中跨域通信通常使用window.name</p>
<p>window.name的美妙之处：name 值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）</p>
<p>window.navigator有与window.name类似的特性，而且可以保存回调方法</p>
<p>MessengerJS的实现思路是高级浏览器使用postMessage，不支持postMessage的使用window.navigator来保存回调方法</p>
<h2 id="Target类"><a href="#Target类" class="headerlink" title="Target类"></a>Target类</h2><p>消息类，发送执行者</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Target</span>(<span class="params">target, name</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.target = target;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Target.prototype.send = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</div><div class="line">    <span class="comment">// 发送消息</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="Messenger类"><a href="#Messenger类" class="headerlink" title="Messenger类"></a>Messenger类</h2><p>信使类，创建多个消息对象，注册多个监听事件，每一个消息对象的广播消息会被这个信使类下面的所有监听事件接收到</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Messenger</span>(<span class="params">messengerName, projectName</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.targets = &#123;&#125;;</div><div class="line">    <span class="keyword">this</span>.name = messengerName;</div><div class="line">    <span class="keyword">this</span>.listenFunc = [];</div><div class="line">    <span class="keyword">this</span>.initListen();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 添加一个消息对象</span></div><div class="line">Messenger.prototype.addTarget = <span class="function"><span class="keyword">function</span>(<span class="params">target, name</span>)</span>&#123;&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 初始化消息监听</span></div><div class="line">Messenger.prototype.initListen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 监听消息</span></div><div class="line">Messenger.prototype.listen = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 注销监听</span></div><div class="line">Messenger.prototype.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 广播消息</span></div><div class="line">Messenger.prototype.send = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;&#125;;</div></pre></td></tr></table></figure>
<p>实现逻辑是：</p>
<ul>
<li>initListen方法初始化，将generalCallback回调方法注册到message监听中</li>
<li>addTarget将消息对象添加到targets对象中</li>
<li>listen方法将监听方法添加到listenFunc数组中</li>
<li>send方法执行每一个target对象的send方法</li>
<li>target对象的send方法执行，触发了message监听，触发了generalCallback的执行，从而执行了listenFunc数组中的方法</li>
</ul>
<p>在postMessage的注册回调方法里加了一个回调方法组listenFunc</p>
<p>在postMessage的监听触发方法外加了一层集体触发对象targets</p>
<p>从而达到了广播的效果</p>
<p>postMessage本身可以实现广播的效果，但是MessengerJS为了兼容，限制了postMessage的能力，自行实现了广播</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>MessengerJS来做iframe通信解决的最常见的问题是，在主页面为iframe留足高度</p>
<p>parent页面</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> messenger = <span class="keyword">new</span> Messenger(<span class="string">'parent'</span>);</div><div class="line">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">'iframepage'</span>);</div><div class="line">    messenger.addTarget(iframe.contentWindow, <span class="string">'iframe'</span>);</div><div class="line"></div><div class="line">    messenger.listen(<span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> result = <span class="built_in">parseInt</span>(msg, <span class="number">10</span>) + <span class="number">20</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (result &lt; mainWindowHeight) &#123;</div><div class="line">            result = mainWindowHeight;</div><div class="line">        &#125;</div><div class="line">        $(<span class="string">'#iframepage'</span>).height(result);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>iframe页面</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// iframe跨域传数据</span></div><div class="line"><span class="keyword">var</span> messenger = <span class="keyword">new</span> Messenger(<span class="string">'iframe'</span>);</div><div class="line">messenger.addTarget(<span class="built_in">window</span>.parent, <span class="string">'parent'</span>); </div><div class="line"></div><div class="line"><span class="comment">// 跨域传main 高度</span></div><div class="line"><span class="keyword">var</span> height = $(<span class="string">'.main'</span>).height();</div><div class="line">messenger.targets[<span class="string">'parent'</span>].send(height);</div><div class="line"></div><div class="line">messenger.listen(<span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>postMessage是一个用于安全的使用跨源通信的方法，帮助web开发回归正轨</p>
<p>MessengerJS实现效果很好，即便做频繁的交互，也不会有明显的卡顿，不过时代在进步，以后可能会很少用到这样的兼容了</p>
<p>官方博文看这里：<a href="https://github.com/biqing/MessengerJS" target="_blank" rel="external">MessengerJS</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚来公司时做得第一个项目是跨部门合作，使用了MessengerJS来做通信，十分简单，MessengerJS代码不长，这里分析一下iframe间通信的实现方式&lt;br&gt;
    
    </summary>
    
      <category term="work" scheme="http://gaoxuefeng.com/categories/work/"/>
    
    
      <category term="javascript" scheme="http://gaoxuefeng.com/tags/javascript/"/>
    
      <category term="iframe" scheme="http://gaoxuefeng.com/tags/iframe/"/>
    
  </entry>
  
  <entry>
    <title>chrome扩展的开发</title>
    <link href="http://gaoxuefeng.com/2016/05/06/chrome%E6%89%A9%E5%B1%95%E7%9A%84%E5%BC%80%E5%8F%91/"/>
    <id>http://gaoxuefeng.com/2016/05/06/chrome扩展的开发/</id>
    <published>2016-05-06T15:06:56.000Z</published>
    <updated>2016-06-15T12:15:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是本人写的第一个chrome扩展，这个扩展的普遍适用性不强，但是确实很方便，具体的开发流程写在这里，感兴趣的看官可以试着自己动手写一写</p>
<a id="more"></a>
<p>这个扩展的作用是<code>change query</code>，它的适用场景是更换百度搜索页的关键词，并且跳转，如果你理解了这个意思，那你一定会想『这能有什么用？』，是的，这在具体生活和工作中一点用处都没有，它仅仅对笔者和笔者身边的产品与测试有一点用处，笔者这两个月的开发任务是一组query下的百度搜索结果页卡片。在这里，笔者想说自己开发chrome扩展更多的是满足自己的切身需要，因地制宜</p>
<p><strong>下面主要介绍具体开发流程</strong></p>
<h2 id="manifest-json配置文件"><a href="#manifest-json配置文件" class="headerlink" title="manifest.json配置文件"></a>manifest.json配置文件</h2><p>第一步就是创建<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">* ```manifest_version```、```name```和```version```为必选，其它为可选</div><div class="line">* 这个文件中```manifest_version```默认为2</div><div class="line">* ```name```、```version```和```description```很明显，其中```version```要书写规范，且递增</div><div class="line">* ```icons```是一个对象，key是像素值，value是图片地址，chrome会选取合适像素的图片在合适的位置（右上角还是扩展程序页面）当做logo</div><div class="line">* ```background```指后台执行环境，指定js文件就可以，因为后台基本没有展现页面的需要</div><div class="line">* ```permissions```指都用到了哪些权限，本地保存的权限，操作tab页的权限等，这些权限要在这里声明</div><div class="line">* ```browser_action```指左键点击右上角logo弹出的页面，这个页面在点开的时候加载出来，收回的时候被销毁</div><div class="line">* ```options_page```指右键点击右上角logo弹出列表中的```选项```是否可点，与可点时左键点击打开的页面</div><div class="line">* ```content_scripts```指可以在chrome窗口页运行的js文件，matches用来匹配哪些url的窗口页运行</div><div class="line"></div><div class="line">```json</div><div class="line">&#123;</div><div class="line">	&quot;manifest_version&quot;: 2,</div><div class="line">	&quot;name&quot;: &quot;Change query&quot;,</div><div class="line">	&quot;version&quot;: &quot;1.0&quot;,</div><div class="line">	&quot;description&quot;: &quot;快速切换导入列表中的query&quot;,</div><div class="line">	&quot;icons&quot;: &#123;</div><div class="line">        &quot;48&quot;: &quot;img/icon48.png&quot;</div><div class="line">    &#125;,</div><div class="line">	&quot;background&quot;: &#123; &quot;scripts&quot;: [&quot;./js/background.js&quot;] &#125;,</div><div class="line">	&quot;permissions&quot;: [</div><div class="line">		&quot;storage&quot;,</div><div class="line">		&quot;tabs&quot;</div><div class="line">	],</div><div class="line">	&quot;browser_action&quot;: &#123;</div><div class="line">		 &quot;default_icon&quot;: &#123;</div><div class="line">	        &quot;38&quot;: &quot;img/icon38.png&quot;</div><div class="line">	    &#125;,</div><div class="line">		&quot;default_popup&quot;: &quot;popup.html&quot;</div><div class="line">	&#125;,</div><div class="line">	&quot;options_page&quot;: &quot;options.html&quot;,</div><div class="line">	&quot;content_scripts&quot;: [</div><div class="line">        &#123;</div><div class="line">            &quot;matches&quot;: [</div><div class="line">            	&quot;http://*.baidu.com/&quot;,</div><div class="line">				&quot;https://*.baidu.com/&quot;</div><div class="line">            ],</div><div class="line">            &quot;js&quot;: [&quot;js/open.js&quot;]</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>chrome主要提供了三个运行环境，<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">## 开发browser_action页面</div><div class="line"></div><div class="line">笔者开发的这个chrome拓展，功能很小，只用到了```browser_action```页面，本文也将只介绍```browser_action```页面的开发，下面是html代码：</div><div class="line"></div><div class="line">```html</div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;./css/style.css&quot;&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;textarea class=&quot;query-area&quot;&gt;&lt;/textarea&gt;</div><div class="line">    &lt;ul class=&quot;query-list&quot;&gt;&lt;/ul&gt;</div><div class="line">	&lt;button id=&quot;btn&quot;&gt;提交&lt;/button&gt;</div><div class="line">	&lt;button id=&quot;prev&quot;&gt;上一个&lt;/button&gt;</div><div class="line">	&lt;button id=&quot;next&quot;&gt;下一个&lt;/button&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;./js/popup.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>这里需要注意的是:</p>
<ul>
<li>不可以在html页面里面直接写js代码，只能引用js文件</li>
<li>上文提到的，这个页面点开创建页面，收回销毁页面，不会保存变量信息</li>
</ul>
<h2 id="Change-query拓展的用处"><a href="#Change-query拓展的用处" class="headerlink" title="Change query拓展的用处"></a>Change query拓展的用处</h2><p>html上面的元素很简单，一个textarea，一个ul，三个button。本拓展的逻辑是在textarea中粘贴进query列表，点击『提交』按钮，接下来通过点击『上一个』或『下一个』来切换相邻query，跳转到相应的结果页面</p>
<p>这个拓展开发的目的很简单，在开发完成后，要对所有的搜索query进行确认，需要在编辑器上复制query，粘贴到输入框回车，切换起来很繁琐，所以开发了这个一次性复制粘贴query，然后在拓展上点击就可以轻松切换query，节省测试时间</p>
<p>第一步，点开popup页：</p>
<p><img src="http://7xir4w.com1.z0.glb.clouddn.com/blog/images/change-query01.jpeg" alt="change-query02"></p>
<p>第二步，复制query列表，粘贴进textarea：</p>
<p><img src="http://7xir4w.com1.z0.glb.clouddn.com/blog/images/change-query02.jpeg" alt="change-query02"></p>
<p>第三步，提交：</p>
<p><img src="http://7xir4w.com1.z0.glb.clouddn.com/blog/images/change-query03.jpeg" alt="change-query02"></p>
<p>第四步，点击下一页：</p>
<p><img src="http://7xir4w.com1.z0.glb.clouddn.com/blog/images/change-query04.png" alt="change-query02"></p>
<p>可以看到飘红的query是当前搜索的query：</p>
<p><img src="http://7xir4w.com1.z0.glb.clouddn.com/blog/images/change-query05.png" alt="change-query02"></p>
<h2 id="Change-query拓展用到的API"><a href="#Change-query拓展用到的API" class="headerlink" title="Change query拓展用到的API"></a>Change query拓展用到的API</h2><p>只用到了两个API，chrome.storage.local与chrome.tabs，使用这两个API需要在<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">chrome.storage.local用来本地存储数据，具体使用的两个方法：</div><div class="line"></div><div class="line">```javascript</div><div class="line">chrome.storage.local.set(&#123;&#125;);</div><div class="line">chrome.storage.local.get(null, function(data) &#123;&#125;);</div></pre></td></tr></table></figure></p>
<p>chrome.tabs用来操作tab页，具体使用的方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取当前用户正在浏览的tab页的url</span></div><div class="line">chrome.tabs.query(&#123;<span class="attr">active</span>: <span class="literal">true</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">tabs</span>) </span>&#123;</div><div class="line">	self.url = tabs[<span class="number">0</span>].url;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 监听当用户切换tab页时，获取切换到的tab页的url</span></div><div class="line">chrome.tabs.onUpdated.addListener(<span class="function"><span class="keyword">function</span>(<span class="params">tabId, changeInfo, tab</span>) </span>&#123;</div><div class="line">	self.url = tab.url;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 操作当前tab页跳转url</span></div><div class="line">chrome.tabs.update(<span class="literal">null</span>, &#123;<span class="attr">url</span>:nextUrl&#125;);</div></pre></td></tr></table></figure>
<p>本项目的下载地址：<a href="http://7xir4w.com1.z0.glb.clouddn.com/blog/zip/query.zip" target="_blank" rel="external">点击下载</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>chrome拓展商店里有很多优秀的拓展可以方便我们的生活与工作<br>chrome拓展开发很简单，多多动手，科技改变生活</p>
<p>对想学习更详细chrome拓展的同学，推荐这里学习：</p>
<p><a href="https://developer.chrome.com/extensions/getstarted.html" target="_blank" rel="external">官网网站</a></p>
<p><a href="http://www.ituring.com.cn/book/1421" target="_blank" rel="external">Chrome扩展及应用开发</a></p>
<p><a href="https://crxdoc-zh.appspot.com/apps/api_other" target="_blank" rel="external">中文API</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是本人写的第一个chrome扩展，这个扩展的普遍适用性不强，但是确实很方便，具体的开发流程写在这里，感兴趣的看官可以试着自己动手写一写&lt;/p&gt;
    
    </summary>
    
      <category term="speedy" scheme="http://gaoxuefeng.com/categories/speedy/"/>
    
    
      <category term="javascript" scheme="http://gaoxuefeng.com/tags/javascript/"/>
    
      <category term="chrome" scheme="http://gaoxuefeng.com/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>浏览器缓存机制</title>
    <link href="http://gaoxuefeng.com/2016/05/06/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
    <id>http://gaoxuefeng.com/2016/05/06/浏览器缓存机制/</id>
    <published>2016-05-06T15:05:33.000Z</published>
    <updated>2016-06-15T12:18:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>浏览器缓存机制，其实主要就是HTTP协议定义的缓存机制（如：Expires;Cache-control等）。但是也有非HTTP协议定义的缓存机制，如使用HTML Meta标签，Web开发者可以在HTML页面的<code>&lt;head&gt;</code>节点中加入<code>&lt;meta&gt;</code>标签</p>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Pragma"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这段代码的作用是告诉浏览器当前页面不被缓存，每次访问都需要去服务器拉取。使用上很简单，但只有部分浏览器可以支持，而且所有缓存代理服务器都不支持，因为代理不解析HTML内容本身。</p>
<p><strong>下面主要介绍HTTP协议定义的缓存机制</strong></p>
<h2 id="Expires策略"><a href="#Expires策略" class="headerlink" title="Expires策略"></a>Expires策略</h2><p>Expires策略是Web服务器响应消息头字段，在响应http请求时告诉<strong>浏览器再过期时间前</strong>浏览器可以直接从浏览器缓存取数据，而无需再次请求。</p>
<p>下面是宝宝PK项目中，浏览器拉取jquery.js web服务器的响应头：</p>
<p><img src="http://7xir4w.com1.z0.glb.clouddn.com/blog/images/cache01.png" alt="cache01"></p>
<p>Web服务器告诉浏览器再2012-11-28 03:30:01这个事件之前可以缓存文件。发送请求的时间是2012-11-28 03:25:01，即缓存5分钟。</p>
<p>不过Expires是HTTP 1.0的东西，现在默认浏览器均默认使用HTTP 1.1，所以它的作用基本忽略。</p>
<h2 id="Cache-control策略（重点关注）"><a href="#Cache-control策略（重点关注）" class="headerlink" title="Cache-control策略（重点关注）"></a>Cache-control策略（重点关注）</h2><p>Cache-control和Expires的作用一致，都是指明当前资源的有效期，控制浏览器是否直接从浏览器缓存取数据还是重新发请求到服务器取数据。<strong>只不过Cache-control的选择更多，设置更细致，如果同时设置的话，其优先级高于Expires。</strong></p>
<p>http协议头Cache-control：</p>
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">指令含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">public</td>
<td style="text-align:center">指示响应可被任何缓存区缓存</td>
</tr>
<tr>
<td style="text-align:center">private</td>
<td style="text-align:center">指示对于单个用户的整个或部分响应消息，不能被共享缓存处理。这允许服务器仅仅描述当前用户的部分响应消息，此响应消息对于其他用户的请求无效</td>
</tr>
<tr>
<td style="text-align:center">no-cache</td>
<td style="text-align:center">指示请求或响应消息不能缓存</td>
</tr>
<tr>
<td style="text-align:center">no-store</td>
<td style="text-align:center">用于防止重要的信息被无意的发布。在请求消息中发送将使得请求和响应消息都不使用缓存</td>
</tr>
<tr>
<td style="text-align:center">max-age</td>
<td style="text-align:center">指示客户端可以接收生存期不大于指定时间（以秒为单位）的响应（一般请求的max-age=0，向server发送http请求确认 ，该资源是否有修改）</td>
</tr>
<tr>
<td style="text-align:center">min-fresh</td>
<td style="text-align:center">指示客户端可以接收响应小于当前时间加上指定时间的响应</td>
</tr>
<tr>
<td style="text-align:center">max-stale</td>
<td style="text-align:center">指示客户端可以接收超出超时期间的响应消息。如果指定max-stale消息的值，那么客户端可以接收超出超时期指定值之内的响应消息</td>
</tr>
</tbody>
</table>
<p>还是上面那个请求，web服务器返回的Cache-control头的值为max-age=300，即5分钟（和上面的Expires时间一致，这个不是必须的）。</p>
<p><img src="http://7xir4w.com1.z0.glb.clouddn.com/blog/images/cache02.png" alt="cache02"></p>
<h2 id="Last-Modified-If-Modified-Since"><a href="#Last-Modified-If-Modified-Since" class="headerlink" title="Last-Modified/If-Modified-Since"></a>Last-Modified/If-Modified-Since</h2><p>Last-Modified/If-Modified-Since要配合Cache-control使用。</p>
<ul>
<li><p>Last-Modified：标识这个响应资源的最后修改时间。web服务器在响应请求时，告诉浏览器资源的最后修改时间。</p>
</li>
<li><p>If-Modified-Since：当资源过期时（使用Cache-control标识的max-age），发现资源具有Last-Modified声明，则再次向web服务器请求时带上头If-Modified-Since，表示请求时间。<strong>web服务器收到请求后发现有头If-Modified-Since则与被请求资源的最后修改时间进行比对。</strong>若最后修改时间较新，说明资源又被改动，则响应整片资源内容（写在响应消息包体内），HTTP 200；若最后修改时间较旧，说明资源无新修改，则响应HTTP 304（无需包体，节省浏览），告知浏览器继续使用所保存的cache。</p>
</li>
</ul>
<h2 id="Etag-If-None-Match"><a href="#Etag-If-None-Match" class="headerlink" title="Etag/If-None-Match"></a>Etag/If-None-Match</h2><p>Etag/If-None-Match要配合Cache-control使用。</p>
<ul>
<li><p>Etag：web服务器响应请求时，告诉浏览器当前资源在服务器的唯一标识（生成规则由服务器决定）。</p>
</li>
<li><p>If-None-Match：当资源过期时（使用Cache-control标识的max-age），发现资源具有Etage声明，则再次向web服务器请求时带上头If-None-Match（Etag的值）。<strong>web服务器收到请求后发现有头If-None-Match则与被请求资源的相应校验串进行比对，决定返回200或304.</strong></p>
</li>
</ul>
<h2 id="既生Last-Modified何生Etag？"><a href="#既生Last-Modified何生Etag？" class="headerlink" title="既生Last-Modified何生Etag？"></a>既生Last-Modified何生Etag？</h2><p>HTTP 1.1中Etag的出现主要是为了解决几个Last-Modified比较难解决的问题：</p>
<ul>
<li><p>Last-Modified标注的最后修改时间只能精确到秒级，如果某些文件在1秒钟以内，被修改多次的话，它将不能准确标注文件的修改时间</p>
</li>
<li><p>如果某些文件会被定期生成，当有时内容并没有任何变化，但Last-Modified却改变了，导致文件没法使用缓存</p>
</li>
<li><p>有可能存在服务器没有准确获取文件修改时间，或者与代理服务器时间不一致等情形</p>
</li>
<li><p>Etag是服务器自动生成或者由开发者生成的对应资源在服务器端的唯一标识符，能够更加准确的控制缓存。<strong>Last-Modified与Etag是可以一起使用的，<em>服务器会优先验证Etag</em>，一致的情况下，才会继续比对Last-Modified，最后才决定是否返回304。</strong></p>
</li>
</ul>
<h2 id="用户行为与缓存"><a href="#用户行为与缓存" class="headerlink" title="用户行为与缓存"></a>用户行为与缓存</h2><p>浏览器缓存行为还有用户的行为有关。</p>
<table>
<thead>
<tr>
<th style="text-align:center">用户操作</th>
<th style="text-align:center">Expires/Cache-control</th>
<th style="text-align:center">Last-Modified/Etag</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">地址栏回车</td>
<td style="text-align:center">有效</td>
<td style="text-align:center">有效</td>
</tr>
<tr>
<td style="text-align:center">页面链接跳转</td>
<td style="text-align:center">有效</td>
<td style="text-align:center">有效</td>
</tr>
<tr>
<td style="text-align:center">新开窗口</td>
<td style="text-align:center">有效</td>
<td style="text-align:center">有效</td>
</tr>
<tr>
<td style="text-align:center">前进、后退</td>
<td style="text-align:center">有效</td>
<td style="text-align:center">有效</td>
</tr>
<tr>
<td style="text-align:center">F5刷新</td>
<td style="text-align:center">无效</td>
<td style="text-align:center">有效</td>
</tr>
<tr>
<td style="text-align:center">Ctrl+F5刷新</td>
<td style="text-align:center">无效</td>
<td style="text-align:center">无效</td>
</tr>
</tbody>
</table>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>浏览器第一次请求：</p>
<p><img src="http://7xir4w.com1.z0.glb.clouddn.com/blog/images/cache03.png" alt="cache03"></p>
<p>浏览器再次请求时：</p>
<p><img src="http://7xir4w.com1.z0.glb.clouddn.com/blog/images/cache04.png" alt="cache04"></p>
<p>转载出处 <a href="http://www.cnblogs.com/skynet/" target="_blank" rel="external">吴秦</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;浏览器缓存机制，其实主要就是HTTP协议定义的缓存机制（如：Expires;Cache-control等）。但是也有非HTTP协议定义的缓存机制，如使用HTML Meta标签，Web开发者可以在HTML页面的&lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;节点中加入&lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt;标签&lt;/p&gt;
    
    </summary>
    
      <category term="reprint" scheme="http://gaoxuefeng.com/categories/reprint/"/>
    
    
      <category term="http" scheme="http://gaoxuefeng.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>对象简单、深度克隆</title>
    <link href="http://gaoxuefeng.com/2016/05/06/%E5%AF%B9%E8%B1%A1%E7%AE%80%E5%8D%95%E3%80%81%E6%B7%B1%E5%BA%A6%E5%85%8B%E9%9A%86/"/>
    <id>http://gaoxuefeng.com/2016/05/06/对象简单、深度克隆/</id>
    <published>2016-05-06T15:04:34.000Z</published>
    <updated>2016-06-29T09:19:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>javascript的一切实例都是对象，只是对象之间稍有不同，分为原始类型和合成类型。原始类型对象指的是字符串（String）、数值（Number）、布尔值（Boolean），合成类型对象指的是数组（Array）、对象（Object）、函数（Function）</p>
<a id="more"></a>
<p>既然对象分为这两类，他们之间的最大差别是复制克隆的差别。普通对象存储的是对象的实际数据，而引用对象存储的是对象的引用地址，而把对象的实际内容单独存放，因为引用对象通常比较庞大，这是数据开销和内存开销优化的手段。通常初学者很难理解这部分内容，就像对象的原型一样，也是同一个概念。对象的原型也是引用对象，把原型的方法和属性放在单独内存当中，而对象的原型链则指向这个内存地址。尽管这部分内容比较拗口复杂，那其中的原理都是一致的，目的也一致</p>
<h2 id="原始类型对象的克隆"><a href="#原始类型对象的克隆" class="headerlink" title="原始类型对象的克隆"></a>原始类型对象的克隆</h2><p><strong>字符串的克隆</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x=<span class="string">"1"</span>;</div><div class="line"><span class="keyword">var</span> y=x;</div><div class="line">y=<span class="string">"2"</span>;</div><div class="line"> </div><div class="line"><span class="comment">// "1"</span></div><div class="line">alert(x);</div><div class="line"><span class="comment">// "2"</span></div><div class="line">alert(y);</div></pre></td></tr></table></figure>
<p><strong>数值的克隆</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x=<span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> y=x;</div><div class="line">y=<span class="number">2</span>;</div><div class="line"></div><div class="line"><span class="comment">// 1</span></div><div class="line">alert(x);</div><div class="line"><span class="comment">// 2</span></div><div class="line">alert(y);</div></pre></td></tr></table></figure>
<p><strong>布尔值的克隆</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x=<span class="literal">true</span>;</div><div class="line"><span class="keyword">var</span> y=x;</div><div class="line">y=<span class="literal">false</span>;</div><div class="line"> </div><div class="line"><span class="comment">// true</span></div><div class="line">alert(x);</div><div class="line"><span class="comment">// false</span></div><div class="line">alert(y);</div></pre></td></tr></table></figure>
<h2 id="合成类型对象的克隆"><a href="#合成类型对象的克隆" class="headerlink" title="合成类型对象的克隆"></a>合成类型对象的克隆</h2><p><strong>数组的克隆</strong></p>
<p>如果采用普通克隆：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x=[<span class="number">1</span>,<span class="number">2</span>];</div><div class="line"><span class="keyword">var</span> y=x;</div><div class="line">y.push(<span class="number">3</span>);</div><div class="line"> </div><div class="line"><span class="comment">// 1,2,3</span></div><div class="line">alert(x);</div><div class="line"> </div><div class="line"><span class="comment">// 1,2,3</span></div><div class="line">alert(y);</div></pre></td></tr></table></figure>
<p>由上可知，原始数组x，克隆数组y，修改了克隆数组y，但也同时修改了原始数组x，这就是引用对象的特点。那么如何才能达到完整的数组克隆呢？<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x=[<span class="number">1</span>,<span class="number">2</span>];</div><div class="line"><span class="keyword">var</span> y=[];</div><div class="line"><span class="keyword">var</span> i=<span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> j=x.length;</div><div class="line"><span class="keyword">for</span>(;i&lt;j;i++)</div><div class="line">&#123;</div><div class="line">	y[i]=x[i];</div><div class="line">&#125;</div><div class="line">y.push(<span class="number">3</span>);</div><div class="line"> </div><div class="line"><span class="comment">// 1,2</span></div><div class="line">alert(x);</div><div class="line"> </div><div class="line"><span class="comment">// 1,2,3</span></div><div class="line">alert(y);</div></pre></td></tr></table></figure></p>
<p>这样，克隆数组y，原始数组x，两个数组互补干扰，实现了完整的数组克隆。</p>
<p><strong>对象的克隆</strong></p>
<p>和数组的克隆同理，对象的完整克隆如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x=&#123;<span class="number">1</span>:<span class="number">2</span>,<span class="number">3</span>:<span class="number">4</span>&#125;;</div><div class="line"><span class="keyword">var</span> y=&#123;&#125;;</div><div class="line"><span class="keyword">var</span> i;</div><div class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> x)</div><div class="line">&#123;</div><div class="line">	y[i]=x[i];</div><div class="line">&#125;</div><div class="line">y[<span class="number">5</span>]=<span class="number">6</span>;</div><div class="line"> </div><div class="line"><span class="comment">// Object &#123;1: 2, 3: 4&#125; </span></div><div class="line"><span class="built_in">console</span>.log(x);</div><div class="line"> </div><div class="line"><span class="comment">// Object &#123;1: 2, 3: 4, 5: 6&#125; </span></div><div class="line"><span class="built_in">console</span>.log(y);</div></pre></td></tr></table></figure>
<p><strong>函数的克隆</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">1</span>);&#125;;</div><div class="line"><span class="keyword">var</span> y=x;</div><div class="line">y=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">2</span>);&#125;;</div><div class="line"></div><div class="line"><span class="comment">// function()&#123;alert(1);&#125;;</span></div><div class="line">alert(x);</div><div class="line"></div><div class="line"><span class="comment">// y=function()&#123;alert(2);&#125;;</span></div><div class="line">alert(y);</div></pre></td></tr></table></figure>
<p>函数的克隆，使用“=”符号就可以了，并且在改变克隆后的对象，不会影响克隆之前的对象，因为克隆之后的对象会单独复制一次并存储实际数据的，是真实的克隆。</p>
<h2 id="完整的对象克隆"><a href="#完整的对象克隆" class="headerlink" title="完整的对象克隆"></a>完整的对象克隆</h2><p>根据1和2，总结一下完整的对象克隆，包括克隆普通对象、引用对象。在写这个方法之前，我们必须想到的是，克隆引用对象必须采用完整克隆（深度克隆），包括对象的值也是一个对象也要进行完整克隆（深度克隆）。</p>
<p>完整的对象克隆又称为深度对象克隆、对象的深度克隆、对象的深度复制等等。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">obj</span>)</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">var</span> o,i,j,k;</div><div class="line">	<span class="keyword">if</span>(<span class="keyword">typeof</span>(obj)!=<span class="string">"object"</span> || obj===<span class="literal">null</span>)<span class="keyword">return</span> obj;</div><div class="line">	<span class="keyword">if</span>(obj <span class="keyword">instanceof</span>(<span class="built_in">Array</span>))</div><div class="line">	&#123;</div><div class="line">		o=[];</div><div class="line">		i=<span class="number">0</span>;j=obj.length;</div><div class="line">		<span class="keyword">for</span>(;i&lt;j;i++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(<span class="keyword">typeof</span>(obj[i])==<span class="string">"object"</span> &amp;&amp; obj[i]!=<span class="literal">null</span>)</div><div class="line">			&#123;</div><div class="line">				o[i]=<span class="built_in">arguments</span>.callee(obj[i]);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span></div><div class="line">			&#123;</div><div class="line">				o[i]=obj[i];</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">	&#123;</div><div class="line">		o=&#123;&#125;;</div><div class="line">		<span class="keyword">for</span>(i <span class="keyword">in</span> obj)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(<span class="keyword">typeof</span>(obj[i])==<span class="string">"object"</span> &amp;&amp; obj[i]!=<span class="literal">null</span>)</div><div class="line">			&#123;</div><div class="line">				o[i]=<span class="built_in">arguments</span>.callee(obj[i]);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span></div><div class="line">			&#123;</div><div class="line">				o[i]=obj[i];</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="keyword">return</span> o;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>转载出处 <a href="http://qianduanblog.com/" target="_blank" rel="external">前端博客</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;javascript的一切实例都是对象，只是对象之间稍有不同，分为原始类型和合成类型。原始类型对象指的是字符串（String）、数值（Number）、布尔值（Boolean），合成类型对象指的是数组（Array）、对象（Object）、函数（Function）&lt;/p&gt;
    
    </summary>
    
      <category term="reprint" scheme="http://gaoxuefeng.com/categories/reprint/"/>
    
    
      <category term="javascript" scheme="http://gaoxuefeng.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高级程序设计学习笔记九</title>
    <link href="http://gaoxuefeng.com/2016/05/06/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%9D/"/>
    <id>http://gaoxuefeng.com/2016/05/06/JavaScript高级程序设计学习笔记九/</id>
    <published>2016-05-06T14:43:25.000Z</published>
    <updated>2016-06-13T08:04:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于JavaScript函数式和闭包的介绍</p>
<a id="more"></a>
<h2 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h2><p>函数声明与函数表达式的区别在于，前者会有一个函数提升的过程，即函数声明可以在任何位置，在需要执行的地方就会正确执行，而函数表达式则需要写在执行的地方的前面，否则会报错。不过函数表达式还有很多有用的地方。</p>
<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>正常的写法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span>(num &lt; <span class="number">1</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> num * factorial(num - <span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种方式在更换方法名后可能会失效，所以我们采用一种更好的解耦的方式，利用arguments.callee这个指向正在执行的函数的指针：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span>(num &lt; <span class="number">1</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> num * <span class="built_in">arguments</span>.callee(num - <span class="number">1</span>);<span class="comment">//factorial换成arguments.callee</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于严格模式不能通过脚本访问arguments.callee，所以使用命名函数表达式：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> factorial = (<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span>(num &lt; <span class="number">1</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> num * f(num - <span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这里使用函数表达式能够解决递归更换函数名导致调用错误函数的问题。</p>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>闭包是指有权访问另一个函数作用域中的变量的函数。</p>
<p>函数创建到执行完毕的过程：</p>
<ol>
<li>创建函数：创建初始作用域链，保存在函数的[[Scope]]属性中，里面包含全局变量对象</li>
<li>调用函数：创建执行环境并被推入到环境栈中，里面包含用[[Scope]]属性中的初始作用域链构建的执行作用域链</li>
<li>活动对象：创建活动对象，并将其推入执行环境作用域的前端</li>
<li>标识符解析：从作用域链的前端开始，一级一级地搜索标识符</li>
<li>执行完毕：执行环境被弹出环境栈，作用域链被销毁，响应的局部活动变量也将被销毁</li>
<li>注意：在另一个函数内部定义的函数会将包含函数的活动对象添加到它的作用域链中，也就是1</li>
</ol>
<p>闭包指的就是上面的6，内部函数的执行环境作用域链上保存着外部函数的活动对象的引用，基于垃圾回收机制，只要内部函数还有从全局环境对象来的引用，那即使外部函数执行完毕，其执行环境的作用域链会被销毁，可外部函数的活动对象却不会被销毁。</p>
<p>由于闭包会携带包含它的函数的作用域，因此会比其他函数占用更多的内存，要谨慎使用。</p>
<p>闭包保存机制的问题：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFunction</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">		result[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> i;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = createFunction();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</div><div class="line">	<span class="built_in">console</span>.log(arr[i]());<span class="comment">//都是10</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>闭包保存的是整个变量对象，每一个闭包保存的都是同一个共有对象，这个共有对象里面的i是在createFunction()返回时的i的值。</p>
<p>稍微更改一下，达到预期效果：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFunction</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">		result[i] = (<span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				<span class="keyword">return</span> num;</div><div class="line">			&#125;;</div><div class="line">		&#125;)(i);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = createFunction();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</div><div class="line">	<span class="built_in">console</span>.log(arr[i]());<span class="comment">//从0至9</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>添加一个立即执行函数，使每一个立即执行函数的活动对象被保存，闭包保存的是外层函数执行完成后的变量对象。</p>
<h2 id="this对象"><a href="#this对象" class="headerlink" title="this对象"></a>this对象</h2><p>闭包不能保存this对象，在使用之前要把this对象赋值给一个变量，然后在闭包中使用这个变量，否则闭包里面的this对象将是闭包执行环境的this对象，原因就是执行环境的作用域链里面的活动变量里面的this对象覆盖了闭包保存的那个外部函数的活动变量里面的this对象。</p>
<h2 id="内存泄露"><a href="#内存泄露" class="headerlink" title="内存泄露"></a>内存泄露</h2><p>IE使用引用计数垃圾收集，而JavaScript使用标记-清除算法，导致了在使用闭包时会有内存泄露的问题：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">assignHandler</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">"someElement"</span>);</div><div class="line">	element.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(element.id);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上代码中闭包保存了element，element至少会有一个引用，所以不会被浏览器回收，element不会被回收导致挂在它上面的闭包也不会被JavaScript回收，创建了一个循环引用。</p>
<p>解决办法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">assignHandler</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">"someElement"</span>);</div><div class="line">	<span class="keyword">var</span> id = element.id;</div><div class="line">	element.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(id);</div><div class="line">	&#125;</div><div class="line">	element = <span class="literal">null</span>;<span class="comment">//制空，保证闭包中不直接引用element</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或者：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">assignHandler</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">//element不在成为变量</span></div><div class="line">	<span class="built_in">document</span>.getElementById(<span class="string">"someElement"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="keyword">this</span>.id);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关于内存泄露还有很多种情况，我还在找相关文章。</p>
<h2 id="模仿块级作用域"><a href="#模仿块级作用域" class="headerlink" title="模仿块级作用域"></a>模仿块级作用域</h2><p>块级作用域：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">//这是一个块级作用域</span></div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>这是一个立即执行函数，function关键字前面加括号阻止其函数声明(不一定非要用括号)，这个函数内部的变量不会被外界使用，除非使用闭包。</p>
<h2 id="私有变量"><a href="#私有变量" class="headerlink" title="私有变量"></a>私有变量</h2><p>私有变量函数内部不被外界拿到的变量，不过有时还是要提供访问私有变量的公有方法。</p>
<h3 id="在构造函数中定义特权方法："><a href="#在构造函数中定义特权方法：" class="headerlink" title="在构造函数中定义特权方法："></a>在构造函数中定义特权方法：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyObject</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">//私有变量和私有函数</span></div><div class="line">	<span class="keyword">var</span> privteVariable = <span class="number">10</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">privateFunction</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//特有方法</span></div><div class="line">	<span class="keyword">this</span>.publicMethod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		privateVariable++;</div><div class="line">		<span class="keyword">return</span> privateFunction();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>优点：私有变量在每一个实例中可以不同</li>
<li>缺点：每一个实例都会创建同样一组新方法</li>
</ul>
<h3 id="在私有作用域中定义："><a href="#在私有作用域中定义：" class="headerlink" title="在私有作用域中定义："></a>在私有作用域中定义：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">//私有变量和私有函数</span></div><div class="line">	<span class="keyword">var</span> privateVariable = <span class="number">10</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">privateFunction</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//构造函数</span></div><div class="line">	<span class="comment">//这里前面是没有var的，它是全局变量才不会被当做私有变量</span></div><div class="line">	MyObject = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"></div><div class="line">	<span class="comment">//公有/特权方法</span></div><div class="line">	MyObject.prototype.publicMethod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		privateVariable++;</div><div class="line">		<span class="keyword">return</span> privateFunction();</div><div class="line">	&#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<ul>
<li>优点：使用原型，代码复用</li>
<li>缺点：每一个实例都没有自己的私有变量</li>
</ul>
<p>以上两种方式除了publicMethod()这一个途径外，没有办法直接访问privteVariable和privateFunction()。</p>
<h3 id="模块模式"><a href="#模块模式" class="headerlink" title="模块模式"></a>模块模式</h3><p>这种模式在需要对单例进行某些初始化，同时又需要维护其私有变量时是非常有用的。</p>
<p>增强版单例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> singleton = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">//私有变量和私有函数</span></div><div class="line">	<span class="keyword">var</span> privateVariable = <span class="number">10</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">privateFunction</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//公有/特权方法和属性</span></div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		<span class="attr">publicProperty</span>: <span class="literal">true</span>,</div><div class="line"></div><div class="line">		<span class="attr">publicMethod</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			privateVariable++;</div><div class="line">			<span class="keyword">return</span> privateFunction();</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">&#125;();</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>闭包与作用域链息息相关，认清作用域链对理解闭包很重要。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于JavaScript函数式和闭包的介绍&lt;/p&gt;
    
    </summary>
    
      <category term="onebook" scheme="http://gaoxuefeng.com/categories/onebook/"/>
    
    
      <category term="javascript" scheme="http://gaoxuefeng.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高级程序设计学习笔记八</title>
    <link href="http://gaoxuefeng.com/2016/05/06/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AB/"/>
    <id>http://gaoxuefeng.com/2016/05/06/JavaScript高级程序设计学习笔记八/</id>
    <published>2016-05-06T14:40:29.000Z</published>
    <updated>2016-06-13T08:05:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>ECMA-262把对象定义为：”无序属性的集合，某属性可以包含基本值、对象或者函数。”严格来讲，这就相当于说对象是一组没有特定顺序的值</p>
<a id="more"></a>
<h2 id="理解对象"><a href="#理解对象" class="headerlink" title="理解对象"></a>理解对象</h2><p>ECMAScript的对象都是基于一个引用类型创建的，用来保存一组键值对，这些值是对象的属性，这些属性决定了对象的用处，开发者操作这些属性来使用对象，对象本身有一个封装的意思。</p>
<p>ECMAScript中有两种属性：</p>
<p>数据属性</p>
<ul>
<li>Configurable：可否配置，默认true</li>
<li>Enumerable：可否枚举，默认true</li>
<li>Writable：可否写，默认true</li>
<li>Value：包含这个属性的数据值</li>
</ul>
<p>访问器属性</p>
<ul>
<li>Configurable：可否配置，默认true</li>
<li>Enumerable：可否配置，默认true</li>
<li>Get：在读取属性时调用的函数，默认undefined</li>
<li>Set：在写入属性时调用的函数，默认undefined</li>
</ul>
<p>要修改属性默认的特性，必须使用ECMAScript5的Object.defineProperty()方法，这个方法接收三个参数：属性所在的对象、属性的名字和一个描述符对象。</p>
<p>要读取属性的特性，可以使用ECMAScript5的Object.getOwnPropertyDescriptor()方法，这个方法接收两个参数：属性所在的对象和要读取其描述符的属性名称。</p>
<p>对象字面量创建的对象的属性都是数据属性，访问器属性只能通过Object.defineProperty()方法来创建。数据属性可以再外界直接调用，而访问器属性更多是用来设置一个属性的值来修改其他属性的值。</p>
<h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><p>目前普遍使用的创建对象方式：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age ,job</span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = name;</div><div class="line">	<span class="keyword">this</span>.age = age;</div><div class="line">	<span class="keyword">this</span>.job = job;</div><div class="line">	<span class="keyword">this</span>.friends = [<span class="string">"Shelby"</span>, <span class="string">"Court"</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"Sefa"</span>, <span class="number">23</span>, <span class="string">"Software Engineer"</span>);</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"Greg"</span>, <span class="number">27</span>, <span class="string">"Doctor"</span>);</div></pre></td></tr></table></figure>
<p>这种创建对象方式是用构造函数和原型来实现的。</p>
<h3 id="new操作符"><a href="#new操作符" class="headerlink" title="new操作符"></a>new操作符</h3><p>构造函数本身是不立即执行的，且不返回对象，需要借助于new操作符，new操作符实际的效果只这样的：</p>
<ol>
<li>一个新对象被创建。</li>
<li>构造函数被执行。执行的时候，相应的传参会被传入，同时上下文(this)会被指定为这个新实例</li>
<li>如果构造函数返回了一个”对象”，那么这个对象会取代整个new出来的结果。如果构造函数没有返回对象，那么new出来的结果为步骤1创建的对象</li>
</ol>
<p>相对应的类似代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">obj.prototype = Person.prototype;</div><div class="line">Person.call(obj);</div><div class="line"><span class="keyword">return</span> obj;</div></pre></td></tr></table></figure>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>构造函数被当做创建对象实例的模板，所实现的是类的一些工作，用来表明要创建的对象有哪些属性，通过传递参数来给属性赋值。不用来表明方法，因为在执行代码的时候，方法都重新创建了一遍，这是没有必要的。</p>
<h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><p>无论什么时候，只要创建了一个新函数，就会根据一组特定的规则为该函数创建一个prototype属性，这个属性指向函数的原型对象。由构造函数创建出来的对象实例都指向这个原型，每个构造函数的原型相对于它的对象实例都是共享的。构造函数和它的实例没有直接关系，可是和构造函数的原型有关系，它的实例能够在原型中拿到属性。</p>
<p>由于以上原因，把方法放在原型中共享可以解决构造函数创建多余方法实例的问题。</p>
<h3 id="in操作符"><a href="#in操作符" class="headerlink" title="in操作符"></a>in操作符</h3><p>有两种方式使用in操作符：</p>
<ul>
<li>单独使用：in操作符能够访问给定属性时返回true，无论该属性存在于实例中还是原型中</li>
<li>在for-in循环使用：for-in能够返回所有能够通过对象访问的、可枚举的属性</li>
</ul>
<h3 id="原型的使用"><a href="#原型的使用" class="headerlink" title="原型的使用"></a>原型的使用</h3><p>更简单的原型语法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line">Person.prototype = &#123;</div><div class="line">	<span class="attr">name</span>: <span class="string">"Sefa"</span>,</div><div class="line">	<span class="attr">age</span>: <span class="number">23</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> friend = <span class="keyword">new</span> Person();</div></pre></td></tr></table></figure>
<p>这种方式重写了prototype对象，而这种重写实际上是重新创建了一个对象，重写之前创建的实例的prototype属性指向旧的原型对象，重写之后创建的实例的prototype属性将指向新创建的原型对象。这种方式会破坏原型链，在需要实现继承时最好不要给子级构造函数使用。而且这种方式会导致修改constructor属性，不过这个属性保存指向构造函数的指针，没有太大的用，可以忽略。</p>
<p>原型中的属性或方法，不属于任何一个实例，只是可以通过实例查找到，因此原型具有动态性，我们对原型对象所做的任何修改都能够立即从实例上反映出来。</p>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承范式，引自<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript#Inheritance" target="_blank" rel="external">Mozilla developer</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 定义Person构造器</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">firstName</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.firstName = firstName;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 在Person.prototype中加入方法</span></div><div class="line">Person.prototype.walk = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"I am walking!"</span>);</div><div class="line">&#125;;</div><div class="line">Person.prototype.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Hello, I'm "</span> + <span class="keyword">this</span>.firstName);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 定义Student构造器</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">firstName, subject</span>) </span>&#123;</div><div class="line">  <span class="comment">// 调用父类构造器, 确保"this" 在调用过程中设置正确</span></div><div class="line">  Person.call(<span class="keyword">this</span>, firstName);</div><div class="line"></div><div class="line">  <span class="comment">// 初始化Student类特有属性</span></div><div class="line">  <span class="keyword">this</span>.subject = subject;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 建立一个由Person.prototype继承而来的Student.prototype对象.</span></div><div class="line">Student.prototype = <span class="built_in">Object</span>.create(Person.prototype);</div><div class="line"></div><div class="line"><span class="comment">// 设置"constructor" 属性指向Student</span></div><div class="line">Student.prototype.constructor = Student;</div><div class="line"></div><div class="line"><span class="comment">// 更换"sayHello" 方法</span></div><div class="line">Student.prototype.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Hello, I'm "</span> + <span class="keyword">this</span>.firstName + <span class="string">". I'm studying "</span> + <span class="keyword">this</span>.subject + <span class="string">"."</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 加入"sayGoodBye" 方法</span></div><div class="line">Student.prototype.sayGoodBye = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Goodbye!"</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 测试实例:</span></div><div class="line"><span class="keyword">var</span> student1 = <span class="keyword">new</span> Student(<span class="string">"Janet"</span>, <span class="string">"Applied Physics"</span>);</div><div class="line">student1.sayHello();   <span class="comment">// "Hello, I'm Janet. I'm studying Applied Physics."</span></div><div class="line">student1.walk();       <span class="comment">// "I am walking!"</span></div><div class="line">student1.sayGoodBye(); <span class="comment">// "Goodbye!"</span></div><div class="line"></div><div class="line"><span class="comment">// Check that instanceof works correctly</span></div><div class="line"><span class="built_in">console</span>.log(student1 <span class="keyword">instanceof</span> Person);  <span class="comment">// true </span></div><div class="line"><span class="built_in">console</span>.log(student1 <span class="keyword">instanceof</span> Student); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>实例包含指向原型对象的内部指针，让原型对象等于另一个对象的实例，这时，这个原型对象将包含指向另一个原型对象的指针，如果原型对象一个一个的相互关联起来，就构成了一条实例与原型的链条。用在原型链上的原型相关的构造函数创建出来的实例，拥有查找它的原型在原型链上的上级的原型对象的属性和方法的能力，原型链依次来实现继承。</p>
<p>不过在子类型的原型上包含超类型的全部实例属性，这些属性不应该全部共享出来。而且在创建子类型的时候，不能向超类型的构造函数中传递参数。</p>
<h3 id="借用构造函数"><a href="#借用构造函数" class="headerlink" title="借用构造函数"></a>借用构造函数</h3><p>在子类型的构造函数中执行超类型的构造函数，可以在执行的时候传入相应参数，同时要将this指向子类型。这种方式可以不共享实例属性，同时传递了参数给超类型构造函数。实现的话用call或apply都可以。</p>
<h3 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create()"></a>Object.create()</h3><p>ECMAScript5新增Object.create()方法，实现类似：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>) </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">	F.prototype = o;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> F();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法接收两个参数：一个用来作新对象原型的对象和一个为新对象定义额外属性的对象。</p>
<p>Object.create()创建出来的对象，需要通过后期增强和原型共享来实现多样性的实例，这些实例是继承自模板对象的子类型。</p>
<p>Object.create()在这里是对原型链上不需要共享属性被共享出来的问题的进一步解决，借用构造函数保证了实例属性不共享，但是在原型中不需要共享的属性还是存在的，解决办法是：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Student.prototype = <span class="built_in">Object</span>.create(Person.prototype);</div></pre></td></tr></table></figure>
<p>子类型原型将不再赋值为超类型的实例，而是赋值为一个仅仅拿到超类型原型对象的一个引用的对象。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在理解使用原型链继承的同时，还要清楚代码中原型链的长度，并在必要时结束原型链，以避免可能存在的性能问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ECMA-262把对象定义为：”无序属性的集合，某属性可以包含基本值、对象或者函数。”严格来讲，这就相当于说对象是一组没有特定顺序的值&lt;/p&gt;
    
    </summary>
    
      <category term="onebook" scheme="http://gaoxuefeng.com/categories/onebook/"/>
    
    
      <category term="javascript" scheme="http://gaoxuefeng.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高级程序设计学习笔记七</title>
    <link href="http://gaoxuefeng.com/2016/05/06/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%83/"/>
    <id>http://gaoxuefeng.com/2016/05/06/JavaScript高级程序设计学习笔记七/</id>
    <published>2016-05-06T14:35:23.000Z</published>
    <updated>2016-06-13T08:02:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于JavaScript的几种类型的介绍</p>
<a id="more"></a>
<h2 id="Date类型"><a href="#Date类型" class="headerlink" title="Date类型"></a>Date类型</h2><p>获取当前日期对象：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span> + <span class="number">1</span>);</div></pre></td></tr></table></figure>
<p>指定时间日期对象：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Tue May 25 2004 00:00:00 GMT+0800 (中国标准时间)</span></div><div class="line"><span class="keyword">var</span> someData = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.parse(<span class="string">"May 25, 2004"</span>));</div><div class="line"></div><div class="line"><span class="comment">//Fri May 06 2005 01:55:55 GMT+0800 (中国标准时间)</span></div><div class="line"><span class="keyword">var</span> allFives = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.UTC(<span class="number">2005</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">17</span>, <span class="number">55</span>, <span class="number">55</span>));</div></pre></td></tr></table></figure>
<p>更多方法详见<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date#Date_instances" target="_blank" rel="external">Mozilla developer</a></p>
<h2 id="RegExp类型"><a href="#RegExp类型" class="headerlink" title="RegExp类型"></a>RegExp类型</h2><p>用来支持正则表达式的类型。</p>
<p><code>var expression = / pattern / flags ;</code></p>
<p>模式(pattern)部分是正则表达式，后面可以带一个或多个标志(flags)。</p>
<ul>
<li>g：表示全局模式，即模式将被应用于所有的字符串</li>
<li>i：表示不区分大小写模式，即在确定匹配项时忽略模式与字符串的大小写</li>
<li>m：表示多行模式，即在达到一行文本末尾时还继续查找下一行</li>
</ul>
<p>正则表达是中的元字符，使用时需要转义：</p>
<p><code>( [ { \ ^ $ | ) ? * + . ] }</code></p>
<p>实例方法：</p>
<ul>
<li>exec()：接受一个参数，即要应用模式的字符串，然后返回包含第一个匹配项信息的数组。这个数组包含额外的属性，index和input，其中index表示匹配项在字符串中的位置，而input表示应用正则的字符串</li>
<li>test()：接受一个字符串参数，在模式与该参数匹配的情况下返回true，否则false</li>
</ul>
<p>ECMAScript中的正则表达式不支持一些高级特性。</p>
<h2 id="Function类型"><a href="#Function类型" class="headerlink" title="Function类型"></a>Function类型</h2><p>ECMAScript中的函数实际上是对象，”函数是对象，函数名是指针”，Java说万事万物皆对象，于是ECMAScript的函数直接就搞成了对象。函数变成对象的好处就是，语言结构简单了，函数可以随便传递了，没有重载也无所谓，可以直接分析参数做出不同的处理。</p>
<p>函数声明与函数表达式是有区别的。声明的函数在代码执行之前有一个函数声明提升的过程，会将声明的函数放在源代码数的顶端。也就是函数声明可以卸载函数执行后面，函数表达式就不行啦，因为有一个赋值的过程，在赋值操作执行之前，变量是没有引用到函数体的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//函数声明，可以</span></div><div class="line"><span class="built_in">console</span>.log(sum(<span class="number">10</span>, <span class="number">10</span>));</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1, num2</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> num1 + num2;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//函数表达式，不可以</span></div><div class="line"><span class="built_in">console</span>.log(sum(<span class="number">10</span>, <span class="number">10</span>));</div><div class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> num1 + num2;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>函数内部有两个特殊对象：arguments和this。函数对象有一个叫callee的属性，是指向拥有这个arguments对象函数的指针。ECMAScript 5也规范化了另一个函数对象的属性：caller，这个属性中保存着调用当前函数的函数的引用。</p>
<p>函数有两个属性：length和prototype。length指的是函数希望接收的命名参数的个数，prototype是保存它们所有实例方法的真正所在。</p>
<p>函数内部包含两个非继承而来的方法：apply()和call()。它们的区别在于传递的参数不同，apply接收两个参数，一个是在其中运行函数的作用域，另一个是参数数组，call第一个参数与之相同，而其余的参数都直接传递给函数。它们真正强大的地方是能够扩充函数赖以运行的作用域。</p>
<p>bind()方法，会创建函数的实例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.color = <span class="string">"red"</span>;</div><div class="line"><span class="keyword">var</span> o = &#123; <span class="attr">color</span>: <span class="string">"blue"</span> &#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayColor</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.color);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> objectSayColor = sayColor.bind(o);</div><div class="line">objectSayColor(); <span class="comment">//blue</span></div></pre></td></tr></table></figure>
<h2 id="基本包装类"><a href="#基本包装类" class="headerlink" title="基本包装类"></a>基本包装类</h2><p>为了便于操作基本类型值，提供的3个特殊的引用类型：Boolean、Number和String，每当读取一个基本类型值的时候，后台就会创建一个对应的基本包装类的对象，从而能够调用一些方法来操作这些数据。</p>
<p>正常代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s1 = <span class="string">"some text"</span>;</div><div class="line"><span class="keyword">var</span> s2 = s1.substring(<span class="number">2</span>);</div></pre></td></tr></table></figure>
<p>后台完成如下步骤：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"some text"</span>);</div><div class="line"><span class="keyword">var</span> s2 = s1.substring(<span class="number">2</span>);</div><div class="line">s1 = <span class="literal">null</span>;</div></pre></td></tr></table></figure>
<p>Boolean类型重写了object的valueOf()方法，所以调用valueOf()能返回true和false不调用这个方法就不能返回true和false了，只有在能触发valueOf方法的场景才是对的。</p>
<p>关于Number包装类的一些方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num = <span class="number">10.005</span>;</div><div class="line"><span class="built_in">console</span>.log(num.toPrecision(<span class="number">1</span>));   <span class="comment">// 1e+1</span></div><div class="line"><span class="built_in">console</span>.log(num.toPrecision(<span class="number">2</span>));  <span class="comment">// 10</span></div><div class="line"><span class="built_in">console</span>.log(num.toPrecision(<span class="number">3</span>)); <span class="comment">// 10.0</span></div><div class="line"><span class="built_in">console</span>.log(num.toExponential(<span class="number">1</span>));     <span class="comment">// 1.0e+1</span></div><div class="line"><span class="built_in">console</span>.log(num.toFixed(<span class="number">1</span>));     <span class="comment">// 10.0</span></div></pre></td></tr></table></figure>
<p>Boolean和Number的包装类都重写了valueOf()、toLocaleString()和toString()方法，感觉没有特别大的用，String的包装类用的很多，这个基本包装类更多的用处是来实现将String是基本类型这一设定的而带来的更多需求。</p>
<p>String类型的很多方法和数组操作类似，我个人觉得比较有用的是模式匹配方法：</p>
<ul>
<li>match()：本质与调用RegExp的exec方法相同</li>
<li>search()：返回字符串中第一个匹配项的索引</li>
<li>replace(): 用于替换子字符串</li>
<li>split()：基于指定分隔符将一个字符串分割成多个子字符串，并将结果放在一个数组里</li>
</ul>
<p>replace()的例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">htmlEscape</span>(<span class="params">text</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> text.replace(<span class="regexp">/[&lt;&gt;"&amp;]/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">match, pos, originalText</span>) </span>&#123;</div><div class="line">		<span class="keyword">switch</span>(match) &#123;</div><div class="line">			<span class="keyword">case</span> <span class="string">"&lt;"</span>:</div><div class="line">				<span class="keyword">return</span> <span class="string">"&amp;lt;"</span>;</div><div class="line">			<span class="keyword">case</span> <span class="string">"&gt;"</span>:</div><div class="line">				<span class="keyword">return</span> <span class="string">"&amp;gt;"</span>;</div><div class="line">			<span class="keyword">case</span> <span class="string">"&amp;"</span>:</div><div class="line">				<span class="keyword">return</span> <span class="string">"&amp;amp;"</span>;</div><div class="line">			<span class="keyword">case</span> <span class="string">"\""</span>:</div><div class="line">				<span class="keyword">return</span> <span class="string">"&amp;quot;"</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(htmlEscape(<span class="string">"&lt;p class=\"greeting\"&gt;Hello world!&lt;/p&gt;"</span>));</div><div class="line"><span class="comment">//&lt;p class="greeting"&gt;Hello world!&lt;/p&gt;;</span></div></pre></td></tr></table></figure>
<h2 id="Global对象"><a href="#Global对象" class="headerlink" title="Global对象"></a>Global对象</h2><p>诸如isNaN()、isFinite()、parseInt()和parseFloat()，实际上都是Global对象的方法。</p>
<p>URI编码方法，有效的URI不包含某些字符，比如说空格，需要URI编码方法对URI编码，用特殊的UTF-8编码替换所有无效的字符，从而让浏览器能够理解。encodeURI()主要用于整个URI，encodeURIComponent()主要用于对URI中的某一段，比如说后缀参数。</p>
<h2 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h2><p>Math对象提供计算功能。</p>
<p>Math对象的方法:</p>
<ul>
<li>min()：确定一组数值中的最小值</li>
<li>max()：确定一组数值中的最大值</li>
<li>ceil()：执行向上舍入</li>
<li>floor()：执行向下舍入</li>
<li>round()：执行标准舍入，四舍五入</li>
<li>random()：返回大于等于0小于1的一个随机数</li>
</ul>
<p>关于获取随机数：</p>
<p><strong>值 = Math.floor(Math.random() * 可能值的总数 + 第一个可能的值)</strong></p>
<p>选择一个1到10的数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span> + <span class="number">1</span>);</div></pre></td></tr></table></figure>
<p>求一个范围之间的值：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectFrom</span>(<span class="params">low, up</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> choices = up - low + <span class="number">1</span>;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * choices + low);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> num = selectFrom(<span class="number">1</span>, <span class="number">10</span>);</div><div class="line"><span class="built_in">console</span>.log(num); <span class="comment">//介于1和10之间的一个数值(包括1和10)</span></div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>引用类型这一章内容很多，看得有点匆忙。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于JavaScript的几种类型的介绍&lt;/p&gt;
    
    </summary>
    
      <category term="onebook" scheme="http://gaoxuefeng.com/categories/onebook/"/>
    
    
      <category term="javascript" scheme="http://gaoxuefeng.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高级程序设计学习笔记六</title>
    <link href="http://gaoxuefeng.com/2016/05/06/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%AD/"/>
    <id>http://gaoxuefeng.com/2016/05/06/JavaScript高级程序设计学习笔记六/</id>
    <published>2016-05-06T14:29:37.000Z</published>
    <updated>2016-06-13T08:06:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于JavaScript的几种基本类型的介绍</p>
<a id="more"></a>
<h2 id="Object类型"><a href="#Object类型" class="headerlink" title="Object类型"></a>Object类型</h2><p>创建对象有两种方式：</p>
<h3 id="new操作符"><a href="#new操作符" class="headerlink" title="new操作符"></a>new操作符</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">person.name = <span class="string">"Sefa"</span>;</div><div class="line">person.age = <span class="number">29</span>;</div></pre></td></tr></table></figure>
<h3 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量"></a>对象字面量</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = &#123;</div><div class="line">	<span class="attr">name</span>: <span class="string">"Sefa"</span>,</div><div class="line">	<span class="attr">age</span>: <span class="number">29</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//这里&#123;&#125;表示的是一个值，因为跟在赋值操作符后面</span></div><div class="line"><span class="comment">//&#123;&#125;还可以表示语句块，比如跟在if语句条件的后面</span></div></pre></td></tr></table></figure>
<p>两种方式更倾向于后者，看着简洁，而且字面量表示法一定是比调用函数方法更高效，后面会讲到的，var array = []比var array = new Array()高效。不仅于此，对象字面量是向函数传递大量可选参数的首选方式，或者修改已有参数对象，类似这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setInfo</span>(<span class="params">args</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> def = &#123;</div><div class="line">		<span class="attr">name</span>: <span class="string">"null"</span>,</div><div class="line">		<span class="attr">age</span>: <span class="number">0</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> param <span class="keyword">in</span> args) &#123;</div><div class="line">		<span class="comment">//方括号表示法，可以容忍属性名包含会导致错误的字符，或关键字和保留字</span></div><div class="line">		<span class="comment">//或者像现在这种情况，只能使用方括号</span></div><div class="line">		def[param] = args[param];</div><div class="line"></div><div class="line">		<span class="comment">//def.param = args.param;如果是这样的话，最后def将是：</span></div><div class="line">		<span class="comment">//Object &#123;name: "null", age: 0, param: undefined&#125;</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">setInfo(&#123;</div><div class="line">	<span class="attr">name</span>: <span class="string">"Nicholas"</span>,</div><div class="line">	<span class="attr">age</span>: <span class="number">29</span></div><div class="line">&#125;);</div><div class="line">setInfo(&#123;</div><div class="line">	<span class="attr">name</span>: <span class="string">"Greg"</span>,</div><div class="line">	<span class="attr">like</span>: <span class="string">"book"</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="Array类型"><a href="#Array类型" class="headerlink" title="Array类型"></a>Array类型</h2><p>ECMAScript数组有两点不同寻常之处：</p>
<ul>
<li>数组中的每一项可以保存任何类型的数据</li>
<li>length是可以设置的，设置小于当前length则移除后面差项，大于当前length则给增加差项并填充undefined值</li>
</ul>
<h3 id="检测数组"><a href="#检测数组" class="headerlink" title="检测数组"></a>检测数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">o</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o) === <span class="string">'[object Array]'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h3><p>这是我自己试着实现的一些数组方法：</p>
<p>栈方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//后进，在数组尾部添加元素</span></div><div class="line"><span class="built_in">Array</span>.prototype.sefaPush = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> self = <span class="keyword">this</span>,</div><div class="line">		args = <span class="keyword">this</span>.slice.call(<span class="built_in">arguments</span>);</div><div class="line">	args.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">v, i</span>) </span>&#123;</div><div class="line">		self[self.length] = v;</div><div class="line">	&#125;)</div><div class="line">	<span class="keyword">return</span> self;</div><div class="line">&#125;</div><div class="line"><span class="comment">//后出，通过length-1去掉末尾元素</span></div><div class="line"><span class="built_in">Array</span>.prototype.sefaPop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span>(<span class="keyword">this</span>.length == <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">var</span> last = <span class="keyword">this</span>[<span class="keyword">this</span>.length - <span class="number">1</span>];</div><div class="line">	<span class="keyword">this</span>.length = <span class="keyword">this</span>.length - <span class="number">1</span>;</div><div class="line">	<span class="keyword">return</span> last;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>队列方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//前出，移除第一个后面向前移动一位</span></div><div class="line"><span class="built_in">Array</span>.prototype.sefaShift = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span>(<span class="keyword">this</span>.length == <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">var</span> first = <span class="keyword">this</span>[<span class="number">0</span>];</div><div class="line">	<span class="keyword">this</span>.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">v, i, self</span>) </span>&#123;</div><div class="line">		self[i] = self[i + <span class="number">1</span>];</div><div class="line">	&#125;);</div><div class="line">	<span class="keyword">this</span>.pop();</div><div class="line">	<span class="keyword">return</span> first;</div><div class="line">&#125;</div><div class="line"><span class="comment">//前进，拼接数组</span></div><div class="line"><span class="built_in">Array</span>.prototype.sefaUnshift = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> args = <span class="keyword">this</span>.slice.call(<span class="built_in">arguments</span>);</div><div class="line">	args.reverse();</div><div class="line">	<span class="keyword">return</span> args.concat(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>重排序方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//反转，浅复制然后依次替换</span></div><div class="line"><span class="built_in">Array</span>.prototype.sefaReverse = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> self = <span class="keyword">this</span>,</div><div class="line">		tArr = <span class="keyword">this</span>.slice(),</div><div class="line">		len = <span class="keyword">this</span>.length - <span class="number">1</span>;</div><div class="line">	<span class="keyword">this</span>.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">v, i</span>) </span>&#123;</div><div class="line">		self[i] = tArr[len - i];</div><div class="line">	&#125;);</div><div class="line">&#125;</div><div class="line"><span class="comment">//排序，快速排序</span></div><div class="line"><span class="built_in">Array</span>.prototype.sefaSort = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> self = <span class="keyword">this</span>,</div><div class="line">		arr = [],</div><div class="line">		compare;</div><div class="line">	<span class="comment">//如果传入方法，按照方法比较</span></div><div class="line">	<span class="keyword">if</span>(<span class="built_in">arguments</span>.length != <span class="number">0</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">arguments</span>[<span class="number">0</span>] == <span class="string">"function"</span>) &#123;</div><div class="line">		compare = <span class="built_in">arguments</span>[<span class="number">0</span>];</div><div class="line">		arr = quickSort(<span class="keyword">this</span>);</div><div class="line">		arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">v, i</span>)</span>&#123;</div><div class="line">			self[i] = v;</div><div class="line">		&#125;)</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//如果没有传入方法，全部转换成字符串比较</span></div><div class="line">	arr = <span class="keyword">this</span>.map(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> (<span class="keyword">typeof</span> v === <span class="string">"object"</span>) ? v.toString() : <span class="string">""</span> + v;</div><div class="line">	&#125;)</div><div class="line">	compare = <span class="function"><span class="keyword">function</span>(<span class="params">prev, next</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span>(prev &lt; next) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(prev &gt; next) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	arr = quickSort(arr);</div><div class="line">	arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">v, i</span>)</span>&#123;</div><div class="line">		self[i] = v;</div><div class="line">	&#125;)</div><div class="line">	<span class="comment">//快速排序方法</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) &#123; <span class="keyword">return</span> arr; &#125;</div><div class="line">		<span class="keyword">var</span> pivotIndex = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>);</div><div class="line">		<span class="keyword">var</span> pivot = arr.splice(pivotIndex, <span class="number">1</span>)[<span class="number">0</span>];</div><div class="line">		<span class="keyword">var</span> left = [];</div><div class="line">		<span class="keyword">var</span> right = [];</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</div><div class="line">			<span class="keyword">if</span> (compare(arr[i], pivot) !== <span class="number">1</span>) &#123;</div><div class="line">			left.push(arr[i]);</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">			right.push(arr[i]);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> quickSort(left).concat([pivot], quickSort(right));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>操作方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//连接，依次替换</span></div><div class="line"><span class="built_in">Array</span>.prototype.sefaConcat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> args = <span class="keyword">this</span>.slice.call(<span class="built_in">arguments</span>),</div><div class="line">		tArr = [];</div><div class="line">	<span class="keyword">this</span>.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">		tArr.push(v);</div><div class="line">	&#125;);</div><div class="line">	args.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span>(isArray(v)) &#123;</div><div class="line">			v.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">				tArr.push(value);</div><div class="line">			&#125;);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			tArr.push(v);</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">	<span class="keyword">return</span> tArr;</div><div class="line">&#125;</div><div class="line"><span class="comment">//浅复制</span></div><div class="line"><span class="built_in">Array</span>.prototype.sefaSlice = <span class="function"><span class="keyword">function</span>(<span class="params">start, end</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> start = start == <span class="literal">undefined</span> ? <span class="number">0</span> : start &gt;= <span class="number">0</span> ? start : start + <span class="keyword">this</span>.length,</div><div class="line">		end = end == <span class="literal">undefined</span> ? <span class="keyword">this</span>.length : end &gt;= <span class="number">0</span> ? end : end + <span class="keyword">this</span>.length,</div><div class="line">		tArr = [],</div><div class="line">		i = start;</div><div class="line">	<span class="keyword">if</span>(end &lt; start) &#123;</div><div class="line">		<span class="keyword">return</span> [];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>( ; i &lt; end; i++) &#123;</div><div class="line">		tArr.push(<span class="keyword">this</span>[i]);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> tArr;</div><div class="line">&#125;</div><div class="line"><span class="comment">//增删改</span></div><div class="line"><span class="built_in">Array</span>.prototype.sefaSplice = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> self = <span class="keyword">this</span>,</div><div class="line">		args = <span class="keyword">this</span>.slice.call(<span class="built_in">arguments</span>),</div><div class="line">		tArr = [],</div><div class="line">		sArr = <span class="keyword">this</span>.slice(),</div><div class="line">		len = args.length;</div><div class="line">	<span class="keyword">this</span>.length = <span class="number">0</span>;</div><div class="line">	<span class="keyword">switch</span>(<span class="literal">true</span>) &#123;</div><div class="line">		<span class="keyword">case</span> len &lt; <span class="number">2</span>:</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> len === <span class="number">2</span>:</div><div class="line">			<span class="comment">//删除操作，指定两个参数，要删除的第一项的位置和要删除的项数</span></div><div class="line">			sArr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">v, i</span>) </span>&#123;</div><div class="line">				<span class="keyword">if</span>(args[<span class="number">0</span>] === i &amp;&amp; args[<span class="number">1</span>] !== <span class="number">0</span>) &#123;</div><div class="line">					tArr.push(v);</div><div class="line">					args[<span class="number">0</span>]++;</div><div class="line">					args[<span class="number">1</span>]--;</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					self.push(v);</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> args[<span class="number">1</span>] === <span class="number">0</span>:</div><div class="line">			<span class="comment">//插入操作，指定三个或更多参数，起始位置，0和要插入的项</span></div><div class="line">			sArr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">v, i</span>) </span>&#123;</div><div class="line">				<span class="keyword">if</span>(args[<span class="number">0</span>] === i)&#123;</div><div class="line">					args.slice(<span class="number">2</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">						self.push(value);</div><div class="line">					&#125;);</div><div class="line">				&#125;</div><div class="line">				self.push(v);</div><div class="line">			&#125;);</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">default</span>:</div><div class="line">			<span class="comment">//替换操作，指定三个或更多参数，起始位置、要删除的项数和要插入的项</span></div><div class="line">			sArr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">v, i</span>) </span>&#123;</div><div class="line">				<span class="keyword">if</span>(args[<span class="number">0</span>] === i &amp;&amp; args[<span class="number">1</span>] !== <span class="number">0</span>) &#123;</div><div class="line">					tArr.push(v);</div><div class="line">					args[<span class="number">0</span>]++;</div><div class="line">					args[<span class="number">1</span>]--;</div><div class="line">					<span class="keyword">if</span>(args[<span class="number">1</span>] === <span class="number">0</span> || args[<span class="number">0</span>] === len) &#123;</div><div class="line">						args.slice(<span class="number">2</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">							self.push(value);</div><div class="line">						&#125;);</div><div class="line">					&#125;</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					self.push(v);</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//返回，删除的项</span></div><div class="line">	<span class="keyword">return</span> tArr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>位置方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//查找</span></div><div class="line"><span class="built_in">Array</span>.prototype.sefaIndexOf = <span class="function"><span class="keyword">function</span>(<span class="params">value, index</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> i = index || <span class="number">0</span>,</div><div class="line">		len = <span class="keyword">this</span>.length;</div><div class="line">	<span class="keyword">for</span>( ; i &lt; len; i++) &#123;</div><div class="line">		<span class="keyword">if</span>(<span class="keyword">this</span>[i] === value) &#123;</div><div class="line">			<span class="keyword">return</span> i;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>迭代方法(使用时注意循环内this指向的是数组)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//全部</span></div><div class="line"><span class="built_in">Array</span>.prototype.sefaEvery = <span class="function"><span class="keyword">function</span>(<span class="params">callback, that</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> i = <span class="number">0</span>,</div><div class="line">		len = <span class="keyword">this</span>.length,</div><div class="line">		isAll = <span class="literal">true</span>,</div><div class="line">		that = that || <span class="keyword">this</span>;</div><div class="line">	<span class="keyword">for</span>( ; i &lt; len; i++) &#123;</div><div class="line">		<span class="keyword">if</span>(!callback.call(that, <span class="keyword">this</span>[i], i, <span class="keyword">this</span>)) &#123;</div><div class="line">			isAll = <span class="literal">false</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> isAll;</div><div class="line">&#125;</div><div class="line"><span class="comment">//过滤</span></div><div class="line"><span class="built_in">Array</span>.prototype.sefaFilter = <span class="function"><span class="keyword">function</span>(<span class="params">callback, that</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> i = <span class="number">0</span>,</div><div class="line">		len = <span class="keyword">this</span>.length,</div><div class="line">		tArr = [],</div><div class="line">		that = that || <span class="keyword">this</span>;</div><div class="line">	<span class="keyword">for</span>( ; i &lt; len; i++) &#123;</div><div class="line">		<span class="keyword">if</span>(callback.call(that, <span class="keyword">this</span>[i], i, <span class="keyword">this</span>)) &#123;</div><div class="line">			tArr.push(<span class="keyword">this</span>[i]);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> tArr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>归并方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//归并</span></div><div class="line"><span class="built_in">Array</span>.prototype.sefaReduce = <span class="function"><span class="keyword">function</span>(<span class="params">callback, first</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> i = <span class="number">1</span>,</div><div class="line">		len = <span class="keyword">this</span>.length,</div><div class="line">		tArr = [];</div><div class="line">	<span class="keyword">if</span>(first != <span class="literal">undefined</span>) &#123;</div><div class="line">		tArr[<span class="number">0</span>] = callback.call(<span class="keyword">this</span>, first, <span class="keyword">this</span>[<span class="number">0</span>], <span class="number">0</span>, <span class="keyword">this</span>);</div><div class="line">		<span class="keyword">for</span>( ; i &lt; len; i++) &#123;</div><div class="line">			tArr[i] = callback.call(<span class="keyword">this</span>, tArr[i<span class="number">-1</span>], <span class="keyword">this</span>[i], i, <span class="keyword">this</span>);</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		tArr[<span class="number">0</span>] = callback.call(<span class="keyword">this</span>, <span class="keyword">this</span>[<span class="number">0</span>], <span class="keyword">this</span>[<span class="number">1</span>], <span class="number">1</span>, <span class="keyword">this</span>);</div><div class="line">		<span class="keyword">for</span>( ; i &lt; len - <span class="number">1</span>; i++) &#123;</div><div class="line">			tArr[i] = callback.call(<span class="keyword">this</span>, tArr[i<span class="number">-1</span>], <span class="keyword">this</span>[i+<span class="number">1</span>], i+<span class="number">1</span>, <span class="keyword">this</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> tArr[tArr.length - <span class="number">1</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Array数组的方法还有很多，这里就不一一实现了，可能有的地方没有验证参数格式，仅供方法功能参考。</p>
<p>试着添加的一些方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//返回数组的一个副本，包含所有值的平方，原始数组不改变</span></div><div class="line"><span class="built_in">Array</span>.prototype.square = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.map(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123; <span class="keyword">return</span> <span class="built_in">Math</span>.pow(x, <span class="number">2</span>); &#125;);</div><div class="line">&#125;</div><div class="line"><span class="comment">//返回数组的一个副本，包含所有值的立方，原始数组不改变</span></div><div class="line"><span class="built_in">Array</span>.prototype.cube = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.map(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123; <span class="keyword">return</span> <span class="built_in">Math</span>.pow(x, <span class="number">3</span>); &#125;);</div><div class="line">&#125;</div><div class="line"><span class="comment">//返回所有数组值的平均值</span></div><div class="line"><span class="built_in">Array</span>.prototype.average = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> !<span class="keyword">this</span>.length ? <span class="literal">NaN</span> : <span class="keyword">this</span>.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, now</span>)</span>&#123; <span class="keyword">return</span> prev + now; &#125;)/<span class="keyword">this</span>.length;</div><div class="line">&#125;</div><div class="line"><span class="comment">//返回所有数组值的总和</span></div><div class="line"><span class="built_in">Array</span>.prototype.sum = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, now</span>)</span>&#123; <span class="keyword">return</span> prev + now; &#125;);</div><div class="line">&#125;</div><div class="line"><span class="comment">//返回所有偶数编号的值组成的数组，原始数组不改变</span></div><div class="line"><span class="built_in">Array</span>.prototype.even = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.filter(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123; <span class="keyword">return</span> x%<span class="number">2</span> == <span class="number">0</span>; &#125;);</div><div class="line">&#125;</div><div class="line"><span class="comment">//返回所有奇数编号的值组成的数组，原始数组不改变</span></div><div class="line"><span class="built_in">Array</span>.prototype.odd = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.filter(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123; <span class="keyword">return</span> x%<span class="number">2</span> != <span class="number">0</span>; &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于JavaScript的几种基本类型的介绍&lt;/p&gt;
    
    </summary>
    
      <category term="onebook" scheme="http://gaoxuefeng.com/categories/onebook/"/>
    
    
      <category term="javascript" scheme="http://gaoxuefeng.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高级程序设计学习笔记五</title>
    <link href="http://gaoxuefeng.com/2016/05/06/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%94/"/>
    <id>http://gaoxuefeng.com/2016/05/06/JavaScript高级程序设计学习笔记五/</id>
    <published>2016-05-06T14:26:17.000Z</published>
    <updated>2016-06-13T08:05:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>这一章主要涉及的知识点，更多的描述了ECMAScript不同于其他语言的地方，我的体会就是：”存在即合理”，上一节讲到函数的参数传递的是值，从这里出发，ECMAScript这门以函数为”第一等公民”的语言围绕函数究竟提供了哪些编程方式</p>
<a id="more"></a>
<h2 id="传递的参数不是引用"><a href="#传递的参数不是引用" class="headerlink" title="传递的参数不是引用"></a>传递的参数不是引用</h2><p>传递的参数不是引用，那想要传递对象要怎么办呢？</p>
<p>可以直接传递对象内存，不过ECMAScript不能直接操作对象的内存空间。ECMAScript给出的方式是，创建对象实例的时候将它的值保存到堆内存中，而将指向这个值得引用保存到变量中，于是，引用类型的变量仅保存对象的一个引用，这个变量虽然是一个引用，但是它有实际的值，它可以用来当做参数传递给函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">	obj.name = <span class="string">"Nicholas"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">setName(person);</div><div class="line">alert(person.name);	<span class="comment">//"Nicholas"</span></div></pre></td></tr></table></figure>
<p>这个例子就是传递对象的方式，对象的引用作为变量的实际的值进行参数传递，在函数内操作这个引用就操作了这个对象，在函数外面对象的属性被更改就是证明。</p>
<p>除了引用类型，ECMAScript还有5种基本类型，Undefined、Null、Boolean、Number和String，这几种类型的变量中保存的就是实际的值，可以直接作为参数传递。它们的变量是相互独立的，这是和引用类型不同的地方。</p>
<p>typeof用来检测基本类型，instanceof用来检测引用类型，后者检测原理是检测构造函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span>(<span class="literal">null</span>);	<span class="comment">//object</span></div><div class="line"><span class="keyword">typeof</span>(<span class="keyword">new</span> <span class="built_in">Object</span>());	<span class="comment">//object</span></div><div class="line"></div><div class="line">alert(person <span class="keyword">instanceof</span> <span class="built_in">Object</span>);	<span class="comment">//变量person是Object吗？</span></div><div class="line">alert(colors <span class="keyword">instanceof</span> <span class="built_in">Array</span>);	<span class="comment">//变量colors是Array吗？</span></div><div class="line">alert(pattern <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>);	<span class="comment">//变量pattern是RegExp吗？</span></div></pre></td></tr></table></figure>
<h2 id="不想传递参数就靠作用域"><a href="#不想传递参数就靠作用域" class="headerlink" title="不想传递参数就靠作用域"></a>不想传递参数就靠作用域</h2><p>函数不光能够使用传递进来的参数，它能对其执行环境有权访问的所有变量和函数的有序访问，靠的是作用域链，作用域链是由全局执行环境到当前执行环境分别创建的变量对象组成的(这个变量对象保存该环境中定义下所有变量和函数)，离得越近越接近作用域链的前端。</p>
<p>这个作用域链是一个导向，标识符解析是沿着这个导向一级一级地搜索标识符的过程。搜索过程始终从作用域链的前端开始，然后逐级地向后回溯，直至找到标识符为止。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> color = <span class="string">"blue"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeColor</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> anotherColor = <span class="string">"red"</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">swapColors</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> tempColor = anotherColor;</div><div class="line">		anotherColor = color;</div><div class="line">		color = tempColor;</div><div class="line"></div><div class="line">		<span class="comment">//这里可以访问color、another和tempColor</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//这里可以访问color和anotherColor，但不能访问tempColor</span></div><div class="line">	swapColors();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//这里只能访问color</span></div><div class="line">changeColor();</div></pre></td></tr></table></figure>
<p>关于动态作用域：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(x);	<span class="comment">//20</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> x = <span class="number">20</span>;</div><div class="line">	foo();</div><div class="line">&#125;</div><div class="line"></div><div class="line">bar();</div></pre></td></tr></table></figure>
<p>首先<code>x:10</code>入栈，<code>foo:&lt;function&gt;</code>入栈，<code>bar:&lt;function&gt;</code>入栈，然后执行bar()，进入bar函数遇到<code>var x = 20;</code>，意味着<code>x:20</code>入栈，执行foo()，遇到<code>console.log(x);</code>，在栈中查找x这个标识符，遇到<code>x:20</code>，于是输出20：</p>
<p><img src="http://7xir4w.com1.z0.glb.clouddn.com/blog/images/note4.png" alt="note4"></p>
<p>JavaScript是静态作用域，不过可以通过eval和with构成动态作用域。</p>
<h2 id="不一样的作用域"><a href="#不一样的作用域" class="headerlink" title="不一样的作用域"></a>不一样的作用域</h2><p>ECMAScript没有块级作用域，就是没有由花括号封闭的代码块形成的作用域。这是个挺不一样的地方，为什么？应该和以函数为”第一等公民”有关系，这是刚开始学习时挺大的转变的地方，另一个地方是length，在Java中数组使用的是length属性，而String使用的是length()方法，在ECMAScript用的都是length属性，这两个地方我改了好久，经常出错。</p>
<p>声明变量，使用var声明的变量会自动被添加到最接近的环境中，而且，还有一个声明提前的事，无论在函数的何处声明变量，在声明之前的位置可以使用这个变量，只是这时的变量是没有赋值的undefined，因此，声明变量应该放在函数的最开始部分，避免不必要的错误，而且便于代码阅读。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = <span class="number">1</span>;</div><div class="line">(<span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(foo);	<span class="comment">//undefiend</span></div><div class="line">	<span class="keyword">var</span> foo = <span class="number">2</span>;</div><div class="line">	<span class="built_in">console</span>.log(foo);	<span class="comment">//2</span></div><div class="line">&#125;)();</div><div class="line"><span class="built_in">console</span>.log(foo);	<span class="comment">//1</span></div></pre></td></tr></table></figure>
<p>上面的例子同时还证明，标识符解析是从内向外一级一级进行，如果检索到变量，搜索即行停止。</p>
<h2 id="垃圾收集"><a href="#垃圾收集" class="headerlink" title="垃圾收集"></a>垃圾收集</h2><p>引自<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Memory_Management#.E5.9E.83.E5.9C.BE.E5.9B.9E.E6.94.B6" target="_blank" rel="external">Mozilla developer</a></p>
<h3 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h3><p>此算法把”对象是否不再需要”简化定义为”对象有没有其他对象引用到它”。如果没有引用指向该对象(零引用)，对象将被垃圾回收机制回收。</p>
<h3 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h3><p>这个算法把”对象是否不再需要”简化定义为”对象是否可以获得”。</p>
<p>这个算法假定设置一个叫做根的对象(在Javascript里，根是全局对象)。定期的，垃圾回收器将从根开始，找所有从根开始引用的对象，然后找这些对象引用的对象……从根开始，垃圾回收器将找到所有可以获得的对象和所有不能获得的对象。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>ECMAScript的设计是以直接性和简洁性来完成它的合理性，入门还是很容易的，不过在使用的过程中需要有严谨的态度。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这一章主要涉及的知识点，更多的描述了ECMAScript不同于其他语言的地方，我的体会就是：”存在即合理”，上一节讲到函数的参数传递的是值，从这里出发，ECMAScript这门以函数为”第一等公民”的语言围绕函数究竟提供了哪些编程方式&lt;/p&gt;
    
    </summary>
    
      <category term="onebook" scheme="http://gaoxuefeng.com/categories/onebook/"/>
    
    
      <category term="javascript" scheme="http://gaoxuefeng.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高级程序设计学习笔记四</title>
    <link href="http://gaoxuefeng.com/2016/05/06/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B/"/>
    <id>http://gaoxuefeng.com/2016/05/06/JavaScript高级程序设计学习笔记四/</id>
    <published>2016-05-06T14:21:59.000Z</published>
    <updated>2016-06-13T08:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于JavaScript的操作符和语句的介绍</p>
<a id="more"></a>
<h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><h3 id="一元操作符"><a href="#一元操作符" class="headerlink" title="一元操作符"></a>一元操作符</h3><p>前置递增和递减操作时，变量的值都是在语句被求值以前改变的；后置递增和递减操作时，在包含它们的语句被求值之后才执行的。前置、后置与执行优先级相等</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> age = <span class="number">29</span>;</div><div class="line"><span class="keyword">var</span> anotherAge = --age + <span class="number">2</span>; <span class="comment">//30</span></div><div class="line"><span class="built_in">console</span>.log(age) <span class="comment">//28</span></div><div class="line"><span class="comment">//类似前置操作的实现</span></div><div class="line">anotherAge = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> age = age - <span class="number">1</span>; &#125;)() + <span class="number">2</span>;</div><div class="line"></div><div class="line">age = <span class="number">29</span>;</div><div class="line">anotherAge = age-- + <span class="number">2</span>; <span class="comment">//31</span></div><div class="line"><span class="built_in">console</span>.log(age); <span class="comment">//28</span></div><div class="line"><span class="comment">//类似后置操作的实现</span></div><div class="line">anotherAge = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; age = age - <span class="number">1</span>; &#125;, <span class="number">0</span>); <span class="keyword">return</span> age; &#125;)() + <span class="number">2</span>;</div><div class="line"><span class="comment">//实现的方式不好，不过大概这个意思</span></div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(anotherAge);</div><div class="line">  <span class="built_in">console</span>.log(age);</div><div class="line">&#125;, <span class="number">0</span>);</div></pre></td></tr></table></figure>
<p>对非数值应用一元加或一元减操作符时，该操作会像Number()一样对这个值执行转换。</p>
<h3 id="位操作符"><a href="#位操作符" class="headerlink" title="位操作符"></a>位操作符</h3><p>我在上一节中使用parseInt()和toString()实现的两个方法，重新用位操作的实现方式：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ipToNum</span>(<span class="params">ip</span>) </span>&#123;</div><div class="line">  <span class="comment">//左移操作，空出8位，按位或操作补上8位，无符号右移0为无符号整数</span></div><div class="line">  <span class="keyword">return</span> ip.split(<span class="string">'.'</span>).reduce(<span class="function"><span class="keyword">function</span> (<span class="params">sum, x</span>) </span>&#123; <span class="keyword">return</span> sum &lt;&lt; <span class="number">8</span> | x &#125;, <span class="number">0</span>) &gt;&gt;&gt; <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">numToIp</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">  <span class="comment">//无符号右移，将右边8位之外的按位与来去掉</span></div><div class="line">  <span class="keyword">return</span> [num &gt;&gt;&gt; <span class="number">24</span>, num &gt;&gt; <span class="number">16</span> &amp; <span class="number">255</span>, num &gt;&gt; <span class="number">8</span> &amp; <span class="number">255</span>, num &amp; <span class="number">255</span>].join(<span class="string">'.'</span>); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="布尔操作符"><a href="#布尔操作符" class="headerlink" title="布尔操作符"></a>布尔操作符</h3><p>逻辑与<code>&amp;&amp;</code>和逻辑或<code>||</code>可以做短路操作。</p>
<h3 id="相等操作符"><a href="#相等操作符" class="headerlink" title="相等操作符"></a>相等操作符</h3><p>相等操作符<code>==</code>和全等操作符<code>===</code>。</p>
<ul>
<li>相等与不相等  先转换再比较  <a href="http://ecma-international.org/ecma-262/5.1/#sec-11.9.3" target="_blank" rel="external">相等比较算法</a></li>
<li>全等与不全等  仅比较不转换  <a href="http://ecma-international.org/ecma-262/5.1/#sec-11.9.6" target="_blank" rel="external">全等比较算法</a></li>
</ul>
<p>补充一点：比较如果两边都是字符串，比较字符串对应的字符编码值，而大小写字符编码值不同。</p>
<p>全等比较其实就是相等比较中类型一致的那一部分比较算法，想要使用全等比较的话就应该使用全等比较，这样能够清晰地表明意图。</p>
<h3 id="逗号操作符"><a href="#逗号操作符" class="headerlink" title="逗号操作符"></a>逗号操作符</h3><p>逗号操作符(,)对多个操作数进行求值并返回最后一个操作数的值。它常常用在for循环中，在每次循环时对多个变量进行更新。<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Expressions_and_Operators#comma_operator" target="_blank" rel="external">逗号操作符</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, j = <span class="number">9</span>; i &lt;= <span class="number">9</span>; i++, j--)</div><div class="line">  <span class="built_in">document</span>.writeln(<span class="string">"a["</span> + i + <span class="string">"]["</span> + j + <span class="string">"]= "</span> + a[i][j]);</div></pre></td></tr></table></figure>
<p>在JavaScript中，逗号运算符的优先级比赋值运算符要底</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">alert(<span class="number">2</span>*<span class="number">5</span>, <span class="number">2</span>*<span class="number">4</span>); <span class="comment">// 输出10</span></div><div class="line"><span class="comment">//修改一下</span></div><div class="line">alert((<span class="number">2</span>*<span class="number">5</span>, <span class="number">2</span>*<span class="number">4</span>)); <span class="comment">// 输出8</span></div></pre></td></tr></table></figure>
<h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><p>不存在块级作用域，循环内的变量，外部可以访问到。</p>
<h3 id="label语句"><a href="#label语句" class="headerlink" title="label语句"></a>label语句</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</div><div class="line"></div><div class="line">outermost:</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</div><div class="line">    <span class="keyword">if</span>(i == <span class="number">5</span> &amp;&amp; j == <span class="number">5</span>) &#123;</div><div class="line">      <span class="keyword">break</span> outermost;</div><div class="line">    &#125;</div><div class="line">    num++;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(num);</div></pre></td></tr></table></figure>
<h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num = <span class="number">25</span>;</div><div class="line"><span class="keyword">switch</span> (<span class="literal">true</span>) &#123;</div><div class="line">  <span class="keyword">case</span> num &lt; <span class="number">0</span>:</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Less than 0."</span>);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">case</span> num &gt;= <span class="number">0</span> &amp;&amp; num &lt;= <span class="number">10</span>:</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Between 0 and 10."</span>);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">case</span> num &gt; <span class="number">10</span> &amp;&amp; num &lt;=<span class="number">20</span>:</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Between 10 and 20."</span>);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">default</span>:</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"More than 20."</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>需要注意的两点：</p>
<ul>
<li>如果需要混合几种情形，不要忘记在代码中添加注释，说明是有意省略了break关键字</li>
<li>switch语句在比较值时使用的是全等操作符</li>
</ul>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>ECMAScript中的函数使用function关键字来声明，后面跟一组参数以及函数体。更为方便的地方是，ECMAScript函数不介意传递进来多少个参数，也不在乎传进来的参数是什么数据类型，而Java和C都是需要指明参数个数的，并且C语言的输入输出是要通过占位符指明数据类型的。</p>
<p>ECMAScript之所以这样随便传递参数，原因是每一个函数体内部都有一个arguments对象，它和数组类似，不过不是Array实例。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//参数可以重写，但是不要这样做</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doAdd</span>(<span class="params">num1 ,num2</span>) </span>&#123;</div><div class="line">  <span class="built_in">arguments</span>[<span class="number">1</span>] = <span class="number">10</span>;</div><div class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>] + num2);</div><div class="line">&#125;</div><div class="line">doAdd(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//11</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于JavaScript的操作符和语句的介绍&lt;/p&gt;
    
    </summary>
    
      <category term="onebook" scheme="http://gaoxuefeng.com/categories/onebook/"/>
    
    
      <category term="javascript" scheme="http://gaoxuefeng.com/tags/javascript/"/>
    
  </entry>
  
</feed>
